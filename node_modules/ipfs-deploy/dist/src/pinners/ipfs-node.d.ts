export = IpfsNode;
/**
 * @typedef {import('ipfs-http-client').Options} IpfsOptions
 * @typedef {import('./types').PinDirOptions} PinDirOptions
 */
declare class IpfsNode {
    static get displayName(): string;
    static get slug(): string;
    /**
     * @param {IpfsOptions} options
     */
    constructor(options: IpfsOptions);
    ipfs: import("ipfs-core-types").IPFS & {
        getEndpointConfig: () => import("ipfs-http-client/dist/src/types").EndpointConfig;
    };
    /**
     * @param {string} dir
     * @param {PinDirOptions|undefined} options
     * @returns {Promise<string>}
     */
    pinDir(dir: string, { tag, hidden }?: PinDirOptions | undefined): Promise<string>;
    /**
     * @param {string} cid
     * @param {string|undefined} tag
     * @returns {Promise<void>}
     */
    pinCid(cid: string, tag: string | undefined): Promise<void>;
    /**
     * @param {string} cid
     * @returns string
     */
    gatewayUrl(cid: string): string;
    get displayName(): string;
}
declare namespace IpfsNode {
    export { IpfsOptions, PinDirOptions };
}
type PinDirOptions = import('./types').PinDirOptions;
type IpfsOptions = import('ipfs-http-client').Options;
//# sourceMappingURL=ipfs-node.d.ts.map