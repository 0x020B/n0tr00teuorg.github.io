export = IpfsCluster;
/**
 * @typedef {import('./types').IPFSClusterOptions} IPFSClusterOptions
 * @typedef {import('./types').PinDirOptions} PinDirOptions
 */
declare class IpfsCluster {
    static get displayName(): string;
    static get slug(): string;
    /**
     *
     * @param {IPFSClusterOptions} options
     */
    constructor({ host, username, password }: IPFSClusterOptions);
    host: string;
    headers: {
        Authorization: string;
    };
    /**
     * @param {string} dir
     * @param {PinDirOptions|undefined} options
     * @returns {Promise<string>}
     */
    pinDir(dir: string, { tag, hidden }?: PinDirOptions | undefined): Promise<string>;
    /**
     * @param {string} cid
     * @param {string|undefined} tag
     * @returns {Promise<void>}
     */
    pinCid(cid: string, tag: string | undefined): Promise<void>;
    /**
     * @param {string} cid
     * @returns string
     */
    gatewayUrl(cid: string): string;
    get displayName(): string;
}
declare namespace IpfsCluster {
    export { IPFSClusterOptions, PinDirOptions };
}
type PinDirOptions = import('./types').PinDirOptions;
type IPFSClusterOptions = import('./types').IPFSClusterOptions;
//# sourceMappingURL=ipfs-cluster.d.ts.map