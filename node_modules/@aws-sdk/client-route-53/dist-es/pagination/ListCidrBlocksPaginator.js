import { ListCidrBlocksCommand, } from "../commands/ListCidrBlocksCommand";
import { Route53 } from "../Route53";
import { Route53Client } from "../Route53Client";
const makePagedClientRequest = async (client, input, ...args) => {
    return await client.send(new ListCidrBlocksCommand(input), ...args);
};
const makePagedRequest = async (client, input, ...args) => {
    return await client.listCidrBlocks(input, ...args);
};
export async function* paginateListCidrBlocks(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while (hasNext) {
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof Route53) {
            page = await makePagedRequest(config.client, input, ...additionalArguments);
        }
        else if (config.client instanceof Route53Client) {
            page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        }
        else {
            throw new Error("Invalid client, expected Route53 | Route53Client");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}
