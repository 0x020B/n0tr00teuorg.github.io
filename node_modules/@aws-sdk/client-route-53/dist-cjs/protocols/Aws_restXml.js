"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_restXmlListGeoLocationsCommand = exports.serializeAws_restXmlListCidrLocationsCommand = exports.serializeAws_restXmlListCidrCollectionsCommand = exports.serializeAws_restXmlListCidrBlocksCommand = exports.serializeAws_restXmlGetTrafficPolicyInstanceCountCommand = exports.serializeAws_restXmlGetTrafficPolicyInstanceCommand = exports.serializeAws_restXmlGetTrafficPolicyCommand = exports.serializeAws_restXmlGetReusableDelegationSetLimitCommand = exports.serializeAws_restXmlGetReusableDelegationSetCommand = exports.serializeAws_restXmlGetQueryLoggingConfigCommand = exports.serializeAws_restXmlGetHostedZoneLimitCommand = exports.serializeAws_restXmlGetHostedZoneCountCommand = exports.serializeAws_restXmlGetHostedZoneCommand = exports.serializeAws_restXmlGetHealthCheckStatusCommand = exports.serializeAws_restXmlGetHealthCheckLastFailureReasonCommand = exports.serializeAws_restXmlGetHealthCheckCountCommand = exports.serializeAws_restXmlGetHealthCheckCommand = exports.serializeAws_restXmlGetGeoLocationCommand = exports.serializeAws_restXmlGetDNSSECCommand = exports.serializeAws_restXmlGetCheckerIpRangesCommand = exports.serializeAws_restXmlGetChangeCommand = exports.serializeAws_restXmlGetAccountLimitCommand = exports.serializeAws_restXmlEnableHostedZoneDNSSECCommand = exports.serializeAws_restXmlDisassociateVPCFromHostedZoneCommand = exports.serializeAws_restXmlDisableHostedZoneDNSSECCommand = exports.serializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = exports.serializeAws_restXmlDeleteTrafficPolicyInstanceCommand = exports.serializeAws_restXmlDeleteTrafficPolicyCommand = exports.serializeAws_restXmlDeleteReusableDelegationSetCommand = exports.serializeAws_restXmlDeleteQueryLoggingConfigCommand = exports.serializeAws_restXmlDeleteKeySigningKeyCommand = exports.serializeAws_restXmlDeleteHostedZoneCommand = exports.serializeAws_restXmlDeleteHealthCheckCommand = exports.serializeAws_restXmlDeleteCidrCollectionCommand = exports.serializeAws_restXmlDeactivateKeySigningKeyCommand = exports.serializeAws_restXmlCreateVPCAssociationAuthorizationCommand = exports.serializeAws_restXmlCreateTrafficPolicyVersionCommand = exports.serializeAws_restXmlCreateTrafficPolicyInstanceCommand = exports.serializeAws_restXmlCreateTrafficPolicyCommand = exports.serializeAws_restXmlCreateReusableDelegationSetCommand = exports.serializeAws_restXmlCreateQueryLoggingConfigCommand = exports.serializeAws_restXmlCreateKeySigningKeyCommand = exports.serializeAws_restXmlCreateHostedZoneCommand = exports.serializeAws_restXmlCreateHealthCheckCommand = exports.serializeAws_restXmlCreateCidrCollectionCommand = exports.serializeAws_restXmlChangeTagsForResourceCommand = exports.serializeAws_restXmlChangeResourceRecordSetsCommand = exports.serializeAws_restXmlChangeCidrCollectionCommand = exports.serializeAws_restXmlAssociateVPCWithHostedZoneCommand = exports.serializeAws_restXmlActivateKeySigningKeyCommand = void 0;
exports.deserializeAws_restXmlGetChangeCommand = exports.deserializeAws_restXmlGetAccountLimitCommand = exports.deserializeAws_restXmlEnableHostedZoneDNSSECCommand = exports.deserializeAws_restXmlDisassociateVPCFromHostedZoneCommand = exports.deserializeAws_restXmlDisableHostedZoneDNSSECCommand = exports.deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = exports.deserializeAws_restXmlDeleteTrafficPolicyInstanceCommand = exports.deserializeAws_restXmlDeleteTrafficPolicyCommand = exports.deserializeAws_restXmlDeleteReusableDelegationSetCommand = exports.deserializeAws_restXmlDeleteQueryLoggingConfigCommand = exports.deserializeAws_restXmlDeleteKeySigningKeyCommand = exports.deserializeAws_restXmlDeleteHostedZoneCommand = exports.deserializeAws_restXmlDeleteHealthCheckCommand = exports.deserializeAws_restXmlDeleteCidrCollectionCommand = exports.deserializeAws_restXmlDeactivateKeySigningKeyCommand = exports.deserializeAws_restXmlCreateVPCAssociationAuthorizationCommand = exports.deserializeAws_restXmlCreateTrafficPolicyVersionCommand = exports.deserializeAws_restXmlCreateTrafficPolicyInstanceCommand = exports.deserializeAws_restXmlCreateTrafficPolicyCommand = exports.deserializeAws_restXmlCreateReusableDelegationSetCommand = exports.deserializeAws_restXmlCreateQueryLoggingConfigCommand = exports.deserializeAws_restXmlCreateKeySigningKeyCommand = exports.deserializeAws_restXmlCreateHostedZoneCommand = exports.deserializeAws_restXmlCreateHealthCheckCommand = exports.deserializeAws_restXmlCreateCidrCollectionCommand = exports.deserializeAws_restXmlChangeTagsForResourceCommand = exports.deserializeAws_restXmlChangeResourceRecordSetsCommand = exports.deserializeAws_restXmlChangeCidrCollectionCommand = exports.deserializeAws_restXmlAssociateVPCWithHostedZoneCommand = exports.deserializeAws_restXmlActivateKeySigningKeyCommand = exports.serializeAws_restXmlUpdateTrafficPolicyInstanceCommand = exports.serializeAws_restXmlUpdateTrafficPolicyCommentCommand = exports.serializeAws_restXmlUpdateHostedZoneCommentCommand = exports.serializeAws_restXmlUpdateHealthCheckCommand = exports.serializeAws_restXmlTestDNSAnswerCommand = exports.serializeAws_restXmlListVPCAssociationAuthorizationsCommand = exports.serializeAws_restXmlListTrafficPolicyVersionsCommand = exports.serializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = exports.serializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = exports.serializeAws_restXmlListTrafficPolicyInstancesCommand = exports.serializeAws_restXmlListTrafficPoliciesCommand = exports.serializeAws_restXmlListTagsForResourcesCommand = exports.serializeAws_restXmlListTagsForResourceCommand = exports.serializeAws_restXmlListReusableDelegationSetsCommand = exports.serializeAws_restXmlListResourceRecordSetsCommand = exports.serializeAws_restXmlListQueryLoggingConfigsCommand = exports.serializeAws_restXmlListHostedZonesByVPCCommand = exports.serializeAws_restXmlListHostedZonesByNameCommand = exports.serializeAws_restXmlListHostedZonesCommand = exports.serializeAws_restXmlListHealthChecksCommand = void 0;
exports.deserializeAws_restXmlUpdateTrafficPolicyInstanceCommand = exports.deserializeAws_restXmlUpdateTrafficPolicyCommentCommand = exports.deserializeAws_restXmlUpdateHostedZoneCommentCommand = exports.deserializeAws_restXmlUpdateHealthCheckCommand = exports.deserializeAws_restXmlTestDNSAnswerCommand = exports.deserializeAws_restXmlListVPCAssociationAuthorizationsCommand = exports.deserializeAws_restXmlListTrafficPolicyVersionsCommand = exports.deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = exports.deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = exports.deserializeAws_restXmlListTrafficPolicyInstancesCommand = exports.deserializeAws_restXmlListTrafficPoliciesCommand = exports.deserializeAws_restXmlListTagsForResourcesCommand = exports.deserializeAws_restXmlListTagsForResourceCommand = exports.deserializeAws_restXmlListReusableDelegationSetsCommand = exports.deserializeAws_restXmlListResourceRecordSetsCommand = exports.deserializeAws_restXmlListQueryLoggingConfigsCommand = exports.deserializeAws_restXmlListHostedZonesByVPCCommand = exports.deserializeAws_restXmlListHostedZonesByNameCommand = exports.deserializeAws_restXmlListHostedZonesCommand = exports.deserializeAws_restXmlListHealthChecksCommand = exports.deserializeAws_restXmlListGeoLocationsCommand = exports.deserializeAws_restXmlListCidrLocationsCommand = exports.deserializeAws_restXmlListCidrCollectionsCommand = exports.deserializeAws_restXmlListCidrBlocksCommand = exports.deserializeAws_restXmlGetTrafficPolicyInstanceCountCommand = exports.deserializeAws_restXmlGetTrafficPolicyInstanceCommand = exports.deserializeAws_restXmlGetTrafficPolicyCommand = exports.deserializeAws_restXmlGetReusableDelegationSetLimitCommand = exports.deserializeAws_restXmlGetReusableDelegationSetCommand = exports.deserializeAws_restXmlGetQueryLoggingConfigCommand = exports.deserializeAws_restXmlGetHostedZoneLimitCommand = exports.deserializeAws_restXmlGetHostedZoneCountCommand = exports.deserializeAws_restXmlGetHostedZoneCommand = exports.deserializeAws_restXmlGetHealthCheckStatusCommand = exports.deserializeAws_restXmlGetHealthCheckLastFailureReasonCommand = exports.deserializeAws_restXmlGetHealthCheckCountCommand = exports.deserializeAws_restXmlGetHealthCheckCommand = exports.deserializeAws_restXmlGetGeoLocationCommand = exports.deserializeAws_restXmlGetDNSSECCommand = exports.deserializeAws_restXmlGetCheckerIpRangesCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const xml_builder_1 = require("@aws-sdk/xml-builder");
const fast_xml_parser_1 = require("fast-xml-parser");
const models_0_1 = require("../models/models_0");
const Route53ServiceException_1 = require("../models/Route53ServiceException");
const serializeAws_restXmlActivateKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlActivateKeySigningKeyCommand = serializeAws_restXmlActivateKeySigningKeyCommand;
const serializeAws_restXmlAssociateVPCWithHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/associatevpc";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("AssociateVPCWithHostedZoneRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("AssociateVPCComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.VPC !== undefined) {
        const node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlAssociateVPCWithHostedZoneCommand = serializeAws_restXmlAssociateVPCWithHostedZoneCommand;
const serializeAws_restXmlChangeCidrCollectionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ChangeCidrCollectionRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Changes !== undefined) {
        const nodes = serializeAws_restXmlCidrCollectionChanges(input.Changes, context);
        const containerNode = new xml_builder_1.XmlNode("Changes");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.CollectionVersion !== undefined) {
        const node = xml_builder_1.XmlNode.of("CollectionVersion", String(input.CollectionVersion)).withName("CollectionVersion");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlChangeCidrCollectionCommand = serializeAws_restXmlChangeCidrCollectionCommand;
const serializeAws_restXmlChangeResourceRecordSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/rrset";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ChangeResourceRecordSetsRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.ChangeBatch !== undefined) {
        const node = serializeAws_restXmlChangeBatch(input.ChangeBatch, context).withName("ChangeBatch");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlChangeResourceRecordSetsCommand = serializeAws_restXmlChangeResourceRecordSetsCommand;
const serializeAws_restXmlChangeTagsForResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/tags/{ResourceType}/{ResourceId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceType", () => input.ResourceType, "{ResourceType}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceId", () => input.ResourceId, "{ResourceId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ChangeTagsForResourceRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.AddTags !== undefined) {
        const nodes = serializeAws_restXmlTagList(input.AddTags, context);
        const containerNode = new xml_builder_1.XmlNode("AddTags");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.RemoveTagKeys !== undefined) {
        const nodes = serializeAws_restXmlTagKeyList(input.RemoveTagKeys, context);
        const containerNode = new xml_builder_1.XmlNode("RemoveTagKeys");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlChangeTagsForResourceCommand = serializeAws_restXmlChangeTagsForResourceCommand;
const serializeAws_restXmlCreateCidrCollectionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateCidrCollectionRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("CidrNonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("CollectionName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateCidrCollectionCommand = serializeAws_restXmlCreateCidrCollectionCommand;
const serializeAws_restXmlCreateHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateHealthCheckRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("HealthCheckNonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.HealthCheckConfig !== undefined) {
        const node = serializeAws_restXmlHealthCheckConfig(input.HealthCheckConfig, context).withName("HealthCheckConfig");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateHealthCheckCommand = serializeAws_restXmlCreateHealthCheckCommand;
const serializeAws_restXmlCreateHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateHostedZoneRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.DelegationSetId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.DelegationSetId).withName("DelegationSetId");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneConfig !== undefined) {
        const node = serializeAws_restXmlHostedZoneConfig(input.HostedZoneConfig, context).withName("HostedZoneConfig");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.VPC !== undefined) {
        const node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateHostedZoneCommand = serializeAws_restXmlCreateHostedZoneCommand;
const serializeAws_restXmlCreateKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/keysigningkey";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateKeySigningKeyRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    if (input.KeyManagementServiceArn !== undefined) {
        const node = xml_builder_1.XmlNode.of("SigningKeyString", input.KeyManagementServiceArn).withName("KeyManagementServiceArn");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("SigningKeyName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Status !== undefined) {
        const node = xml_builder_1.XmlNode.of("SigningKeyStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateKeySigningKeyCommand = serializeAws_restXmlCreateKeySigningKeyCommand;
const serializeAws_restXmlCreateQueryLoggingConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateQueryLoggingConfigRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CloudWatchLogsLogGroupArn !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("CloudWatchLogsLogGroupArn", input.CloudWatchLogsLogGroupArn)
            .withName("CloudWatchLogsLogGroupArn");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateQueryLoggingConfigCommand = serializeAws_restXmlCreateQueryLoggingConfigCommand;
const serializeAws_restXmlCreateReusableDelegationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateReusableDelegationSetRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.CallerReference !== undefined) {
        const node = xml_builder_1.XmlNode.of("Nonce", input.CallerReference).withName("CallerReference");
        bodyNode.addChildNode(node);
    }
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateReusableDelegationSetCommand = serializeAws_restXmlCreateReusableDelegationSetCommand;
const serializeAws_restXmlCreateTrafficPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateTrafficPolicyRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.Document !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyDocument", input.Document).withName("Document");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateTrafficPolicyCommand = serializeAws_restXmlCreateTrafficPolicyCommand;
const serializeAws_restXmlCreateTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance";
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateTrafficPolicyInstanceRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.HostedZoneId !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    if (input.Name !== undefined) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.TTL !== undefined) {
        const node = xml_builder_1.XmlNode.of("TTL", String(input.TTL)).withName("TTL");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyId !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyId", input.TrafficPolicyId).withName("TrafficPolicyId");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyVersion !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("TrafficPolicyVersion", String(input.TrafficPolicyVersion))
            .withName("TrafficPolicyVersion");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateTrafficPolicyInstanceCommand = serializeAws_restXmlCreateTrafficPolicyInstanceCommand;
const serializeAws_restXmlCreateTrafficPolicyVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateTrafficPolicyVersionRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.Document !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyDocument", input.Document).withName("Document");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateTrafficPolicyVersionCommand = serializeAws_restXmlCreateTrafficPolicyVersionCommand;
const serializeAws_restXmlCreateVPCAssociationAuthorizationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("CreateVPCAssociationAuthorizationRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.VPC !== undefined) {
        const node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlCreateVPCAssociationAuthorizationCommand = serializeAws_restXmlCreateVPCAssociationAuthorizationCommand;
const serializeAws_restXmlDeactivateKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeactivateKeySigningKeyCommand = serializeAws_restXmlDeactivateKeySigningKeyCommand;
const serializeAws_restXmlDeleteCidrCollectionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteCidrCollectionCommand = serializeAws_restXmlDeleteCidrCollectionCommand;
const serializeAws_restXmlDeleteHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck/{HealthCheckId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteHealthCheckCommand = serializeAws_restXmlDeleteHealthCheckCommand;
const serializeAws_restXmlDeleteHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteHostedZoneCommand = serializeAws_restXmlDeleteHostedZoneCommand;
const serializeAws_restXmlDeleteKeySigningKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Name", () => input.Name, "{Name}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteKeySigningKeyCommand = serializeAws_restXmlDeleteKeySigningKeyCommand;
const serializeAws_restXmlDeleteQueryLoggingConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteQueryLoggingConfigCommand = serializeAws_restXmlDeleteQueryLoggingConfigCommand;
const serializeAws_restXmlDeleteReusableDelegationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteReusableDelegationSetCommand = serializeAws_restXmlDeleteReusableDelegationSetCommand;
const serializeAws_restXmlDeleteTrafficPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version.toString(), "{Version}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteTrafficPolicyCommand = serializeAws_restXmlDeleteTrafficPolicyCommand;
const serializeAws_restXmlDeleteTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteTrafficPolicyInstanceCommand = serializeAws_restXmlDeleteTrafficPolicyInstanceCommand;
const serializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/deauthorizevpcassociation";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("DeleteVPCAssociationAuthorizationRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.VPC !== undefined) {
        const node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = serializeAws_restXmlDeleteVPCAssociationAuthorizationCommand;
const serializeAws_restXmlDisableHostedZoneDNSSECCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/disable-dnssec";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDisableHostedZoneDNSSECCommand = serializeAws_restXmlDisableHostedZoneDNSSECCommand;
const serializeAws_restXmlDisassociateVPCFromHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/disassociatevpc";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("DisassociateVPCFromHostedZoneRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("DisassociateVPCComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.VPC !== undefined) {
        const node = serializeAws_restXmlVPC(input.VPC, context).withName("VPC");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlDisassociateVPCFromHostedZoneCommand = serializeAws_restXmlDisassociateVPCFromHostedZoneCommand;
const serializeAws_restXmlEnableHostedZoneDNSSECCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/enable-dnssec";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlEnableHostedZoneDNSSECCommand = serializeAws_restXmlEnableHostedZoneDNSSECCommand;
const serializeAws_restXmlGetAccountLimitCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/accountlimit/{Type}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Type", () => input.Type, "{Type}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetAccountLimitCommand = serializeAws_restXmlGetAccountLimitCommand;
const serializeAws_restXmlGetChangeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/change/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetChangeCommand = serializeAws_restXmlGetChangeCommand;
const serializeAws_restXmlGetCheckerIpRangesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/checkeripranges";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetCheckerIpRangesCommand = serializeAws_restXmlGetCheckerIpRangesCommand;
const serializeAws_restXmlGetDNSSECCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/dnssec";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetDNSSECCommand = serializeAws_restXmlGetDNSSECCommand;
const serializeAws_restXmlGetGeoLocationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/geolocation";
    const query = map({
        continentcode: [, input.ContinentCode],
        countrycode: [, input.CountryCode],
        subdivisioncode: [, input.SubdivisionCode],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlGetGeoLocationCommand = serializeAws_restXmlGetGeoLocationCommand;
const serializeAws_restXmlGetHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck/{HealthCheckId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetHealthCheckCommand = serializeAws_restXmlGetHealthCheckCommand;
const serializeAws_restXmlGetHealthCheckCountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheckcount";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetHealthCheckCountCommand = serializeAws_restXmlGetHealthCheckCountCommand;
const serializeAws_restXmlGetHealthCheckLastFailureReasonCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetHealthCheckLastFailureReasonCommand = serializeAws_restXmlGetHealthCheckLastFailureReasonCommand;
const serializeAws_restXmlGetHealthCheckStatusCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/healthcheck/{HealthCheckId}/status";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetHealthCheckStatusCommand = serializeAws_restXmlGetHealthCheckStatusCommand;
const serializeAws_restXmlGetHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetHostedZoneCommand = serializeAws_restXmlGetHostedZoneCommand;
const serializeAws_restXmlGetHostedZoneCountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzonecount";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetHostedZoneCountCommand = serializeAws_restXmlGetHostedZoneCountCommand;
const serializeAws_restXmlGetHostedZoneLimitCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzonelimit/{HostedZoneId}/{Type}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Type", () => input.Type, "{Type}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetHostedZoneLimitCommand = serializeAws_restXmlGetHostedZoneLimitCommand;
const serializeAws_restXmlGetQueryLoggingConfigCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetQueryLoggingConfigCommand = serializeAws_restXmlGetQueryLoggingConfigCommand;
const serializeAws_restXmlGetReusableDelegationSetCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetReusableDelegationSetCommand = serializeAws_restXmlGetReusableDelegationSetCommand;
const serializeAws_restXmlGetReusableDelegationSetLimitCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/reusabledelegationsetlimit/{DelegationSetId}/{Type}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Type", () => input.Type, "{Type}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "DelegationSetId", () => input.DelegationSetId, "{DelegationSetId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetReusableDelegationSetLimitCommand = serializeAws_restXmlGetReusableDelegationSetLimitCommand;
const serializeAws_restXmlGetTrafficPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version.toString(), "{Version}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetTrafficPolicyCommand = serializeAws_restXmlGetTrafficPolicyCommand;
const serializeAws_restXmlGetTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetTrafficPolicyInstanceCommand = serializeAws_restXmlGetTrafficPolicyInstanceCommand;
const serializeAws_restXmlGetTrafficPolicyInstanceCountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstancecount";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlGetTrafficPolicyInstanceCountCommand = serializeAws_restXmlGetTrafficPolicyInstanceCountCommand;
const serializeAws_restXmlListCidrBlocksCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/cidrcollection/{CollectionId}/cidrblocks";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CollectionId", () => input.CollectionId, "{CollectionId}", false);
    const query = map({
        location: [, input.LocationName],
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListCidrBlocksCommand = serializeAws_restXmlListCidrBlocksCommand;
const serializeAws_restXmlListCidrCollectionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection";
    const query = map({
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListCidrCollectionsCommand = serializeAws_restXmlListCidrCollectionsCommand;
const serializeAws_restXmlListCidrLocationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/cidrcollection/{CollectionId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "CollectionId", () => input.CollectionId, "{CollectionId}", false);
    const query = map({
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListCidrLocationsCommand = serializeAws_restXmlListCidrLocationsCommand;
const serializeAws_restXmlListGeoLocationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/geolocations";
    const query = map({
        startcontinentcode: [, input.StartContinentCode],
        startcountrycode: [, input.StartCountryCode],
        startsubdivisioncode: [, input.StartSubdivisionCode],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListGeoLocationsCommand = serializeAws_restXmlListGeoLocationsCommand;
const serializeAws_restXmlListHealthChecksCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck";
    const query = map({
        marker: [, input.Marker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListHealthChecksCommand = serializeAws_restXmlListHealthChecksCommand;
const serializeAws_restXmlListHostedZonesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone";
    const query = map({
        marker: [, input.Marker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        delegationsetid: [, input.DelegationSetId],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListHostedZonesCommand = serializeAws_restXmlListHostedZonesCommand;
const serializeAws_restXmlListHostedZonesByNameCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzonesbyname";
    const query = map({
        dnsname: [, input.DNSName],
        hostedzoneid: [, input.HostedZoneId],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListHostedZonesByNameCommand = serializeAws_restXmlListHostedZonesByNameCommand;
const serializeAws_restXmlListHostedZonesByVPCCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzonesbyvpc";
    const query = map({
        vpcid: [, (0, smithy_client_1.expectNonNull)(input.VPCId, `VPCId`)],
        vpcregion: [, (0, smithy_client_1.expectNonNull)(input.VPCRegion, `VPCRegion`)],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
        nexttoken: [, input.NextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListHostedZonesByVPCCommand = serializeAws_restXmlListHostedZonesByVPCCommand;
const serializeAws_restXmlListQueryLoggingConfigsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/queryloggingconfig";
    const query = map({
        hostedzoneid: [, input.HostedZoneId],
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListQueryLoggingConfigsCommand = serializeAws_restXmlListQueryLoggingConfigsCommand;
const serializeAws_restXmlListResourceRecordSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/rrset";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    const query = map({
        name: [, input.StartRecordName],
        type: [, input.StartRecordType],
        identifier: [, input.StartRecordIdentifier],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListResourceRecordSetsCommand = serializeAws_restXmlListResourceRecordSetsCommand;
const serializeAws_restXmlListReusableDelegationSetsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/delegationset";
    const query = map({
        marker: [, input.Marker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListReusableDelegationSetsCommand = serializeAws_restXmlListReusableDelegationSetsCommand;
const serializeAws_restXmlListTagsForResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/tags/{ResourceType}/{ResourceId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceType", () => input.ResourceType, "{ResourceType}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceId", () => input.ResourceId, "{ResourceId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlListTagsForResourceCommand = serializeAws_restXmlListTagsForResourceCommand;
const serializeAws_restXmlListTagsForResourcesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/tags/{ResourceType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "ResourceType", () => input.ResourceType, "{ResourceType}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("ListTagsForResourcesRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.ResourceIds !== undefined) {
        const nodes = serializeAws_restXmlTagResourceIdList(input.ResourceIds, context);
        const containerNode = new xml_builder_1.XmlNode("ResourceIds");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlListTagsForResourcesCommand = serializeAws_restXmlListTagsForResourcesCommand;
const serializeAws_restXmlListTrafficPoliciesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicies";
    const query = map({
        trafficpolicyid: [, input.TrafficPolicyIdMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListTrafficPoliciesCommand = serializeAws_restXmlListTrafficPoliciesCommand;
const serializeAws_restXmlListTrafficPolicyInstancesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstances";
    const query = map({
        hostedzoneid: [, input.HostedZoneIdMarker],
        trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
        trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListTrafficPolicyInstancesCommand = serializeAws_restXmlListTrafficPolicyInstancesCommand;
const serializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/trafficpolicyinstances/hostedzone";
    const query = map({
        id: [, (0, smithy_client_1.expectNonNull)(input.HostedZoneId, `HostedZoneId`)],
        trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
        trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = serializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand;
const serializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/trafficpolicyinstances/trafficpolicy";
    const query = map({
        id: [, (0, smithy_client_1.expectNonNull)(input.TrafficPolicyId, `TrafficPolicyId`)],
        version: [
            (0, smithy_client_1.expectNonNull)(input.TrafficPolicyVersion, `TrafficPolicyVersion`) != null,
            () => input.TrafficPolicyVersion.toString(),
        ],
        hostedzoneid: [, input.HostedZoneIdMarker],
        trafficpolicyinstancename: [, input.TrafficPolicyInstanceNameMarker],
        trafficpolicyinstancetype: [, input.TrafficPolicyInstanceTypeMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = serializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand;
const serializeAws_restXmlListTrafficPolicyVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicies/{Id}/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    const query = map({
        trafficpolicyversion: [, input.TrafficPolicyVersionMarker],
        maxitems: [() => input.MaxItems !== void 0, () => input.MaxItems.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListTrafficPolicyVersionsCommand = serializeAws_restXmlListTrafficPolicyVersionsCommand;
const serializeAws_restXmlListVPCAssociationAuthorizationsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/2013-04-01/hostedzone/{HostedZoneId}/authorizevpcassociation";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HostedZoneId", () => input.HostedZoneId, "{HostedZoneId}", false);
    const query = map({
        nexttoken: [, input.NextToken],
        maxresults: [() => input.MaxResults !== void 0, () => input.MaxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlListVPCAssociationAuthorizationsCommand = serializeAws_restXmlListVPCAssociationAuthorizationsCommand;
const serializeAws_restXmlTestDNSAnswerCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/testdnsanswer";
    const query = map({
        hostedzoneid: [, (0, smithy_client_1.expectNonNull)(input.HostedZoneId, `HostedZoneId`)],
        recordname: [, (0, smithy_client_1.expectNonNull)(input.RecordName, `RecordName`)],
        recordtype: [, (0, smithy_client_1.expectNonNull)(input.RecordType, `RecordType`)],
        resolverip: [, input.ResolverIP],
        edns0clientsubnetip: [, input.EDNS0ClientSubnetIP],
        edns0clientsubnetmask: [, input.EDNS0ClientSubnetMask],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restXmlTestDNSAnswerCommand = serializeAws_restXmlTestDNSAnswerCommand;
const serializeAws_restXmlUpdateHealthCheckCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/healthcheck/{HealthCheckId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "HealthCheckId", () => input.HealthCheckId, "{HealthCheckId}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateHealthCheckRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.AlarmIdentifier !== undefined) {
        const node = serializeAws_restXmlAlarmIdentifier(input.AlarmIdentifier, context).withName("AlarmIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.ChildHealthChecks !== undefined) {
        const nodes = serializeAws_restXmlChildHealthCheckList(input.ChildHealthChecks, context);
        const containerNode = new xml_builder_1.XmlNode("ChildHealthChecks");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.Disabled !== undefined) {
        const node = xml_builder_1.XmlNode.of("Disabled", String(input.Disabled)).withName("Disabled");
        bodyNode.addChildNode(node);
    }
    if (input.EnableSNI !== undefined) {
        const node = xml_builder_1.XmlNode.of("EnableSNI", String(input.EnableSNI)).withName("EnableSNI");
        bodyNode.addChildNode(node);
    }
    if (input.FailureThreshold !== undefined) {
        const node = xml_builder_1.XmlNode.of("FailureThreshold", String(input.FailureThreshold)).withName("FailureThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.FullyQualifiedDomainName !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("FullyQualifiedDomainName", input.FullyQualifiedDomainName)
            .withName("FullyQualifiedDomainName");
        bodyNode.addChildNode(node);
    }
    if (input.HealthCheckVersion !== undefined) {
        const node = xml_builder_1.XmlNode.of("HealthCheckVersion", String(input.HealthCheckVersion)).withName("HealthCheckVersion");
        bodyNode.addChildNode(node);
    }
    if (input.HealthThreshold !== undefined) {
        const node = xml_builder_1.XmlNode.of("HealthThreshold", String(input.HealthThreshold)).withName("HealthThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.IPAddress !== undefined) {
        const node = xml_builder_1.XmlNode.of("IPAddress", input.IPAddress).withName("IPAddress");
        bodyNode.addChildNode(node);
    }
    if (input.InsufficientDataHealthStatus !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("InsufficientDataHealthStatus", input.InsufficientDataHealthStatus)
            .withName("InsufficientDataHealthStatus");
        bodyNode.addChildNode(node);
    }
    if (input.Inverted !== undefined) {
        const node = xml_builder_1.XmlNode.of("Inverted", String(input.Inverted)).withName("Inverted");
        bodyNode.addChildNode(node);
    }
    if (input.Port !== undefined) {
        const node = xml_builder_1.XmlNode.of("Port", String(input.Port)).withName("Port");
        bodyNode.addChildNode(node);
    }
    if (input.Regions !== undefined) {
        const nodes = serializeAws_restXmlHealthCheckRegionList(input.Regions, context);
        const containerNode = new xml_builder_1.XmlNode("Regions");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.ResetElements !== undefined) {
        const nodes = serializeAws_restXmlResettableElementNameList(input.ResetElements, context);
        const containerNode = new xml_builder_1.XmlNode("ResetElements");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.ResourcePath !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourcePath", input.ResourcePath).withName("ResourcePath");
        bodyNode.addChildNode(node);
    }
    if (input.SearchString !== undefined) {
        const node = xml_builder_1.XmlNode.of("SearchString", input.SearchString).withName("SearchString");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlUpdateHealthCheckCommand = serializeAws_restXmlUpdateHealthCheckCommand;
const serializeAws_restXmlUpdateHostedZoneCommentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/hostedzone/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateHostedZoneCommentRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlUpdateHostedZoneCommentCommand = serializeAws_restXmlUpdateHostedZoneCommentCommand;
const serializeAws_restXmlUpdateTrafficPolicyCommentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicy/{Id}/{Version}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Version", () => input.Version.toString(), "{Version}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateTrafficPolicyCommentRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.Comment !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyComment", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlUpdateTrafficPolicyCommentCommand = serializeAws_restXmlUpdateTrafficPolicyCommentCommand;
const serializeAws_restXmlUpdateTrafficPolicyInstanceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/xml",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/2013-04-01/trafficpolicyinstance/{Id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Id", () => input.Id, "{Id}", false);
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new xml_builder_1.XmlNode("UpdateTrafficPolicyInstanceRequest");
    bodyNode.addAttribute("xmlns", "https://route53.amazonaws.com/doc/2013-04-01/");
    if (input.TTL !== undefined) {
        const node = xml_builder_1.XmlNode.of("TTL", String(input.TTL)).withName("TTL");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyId !== undefined) {
        const node = xml_builder_1.XmlNode.of("TrafficPolicyId", input.TrafficPolicyId).withName("TrafficPolicyId");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyVersion !== undefined) {
        const node = xml_builder_1.XmlNode
            .of("TrafficPolicyVersion", String(input.TrafficPolicyVersion))
            .withName("TrafficPolicyVersion");
        bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restXmlUpdateTrafficPolicyInstanceCommand = serializeAws_restXmlUpdateTrafficPolicyInstanceCommand;
const deserializeAws_restXmlActivateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlActivateKeySigningKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlActivateKeySigningKeyCommand = deserializeAws_restXmlActivateKeySigningKeyCommand;
const deserializeAws_restXmlActivateKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context);
        case "NoSuchKeySigningKey":
        case "com.amazonaws.route53#NoSuchKeySigningKey":
            throw await deserializeAws_restXmlNoSuchKeySigningKeyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlAssociateVPCWithHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlAssociateVPCWithHostedZoneCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlAssociateVPCWithHostedZoneCommand = deserializeAws_restXmlAssociateVPCWithHostedZoneCommand;
const deserializeAws_restXmlAssociateVPCWithHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictingDomainExists":
        case "com.amazonaws.route53#ConflictingDomainExists":
            throw await deserializeAws_restXmlConflictingDomainExistsResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.route53#NotAuthorizedException":
            throw await deserializeAws_restXmlNotAuthorizedExceptionResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        case "PublicZoneVPCAssociation":
        case "com.amazonaws.route53#PublicZoneVPCAssociation":
            throw await deserializeAws_restXmlPublicZoneVPCAssociationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlChangeCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlChangeCidrCollectionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(data["Id"]);
    }
    return contents;
};
exports.deserializeAws_restXmlChangeCidrCollectionCommand = deserializeAws_restXmlChangeCidrCollectionCommand;
const deserializeAws_restXmlChangeCidrCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CidrBlockInUseException":
        case "com.amazonaws.route53#CidrBlockInUseException":
            throw await deserializeAws_restXmlCidrBlockInUseExceptionResponse(parsedOutput, context);
        case "CidrCollectionVersionMismatchException":
        case "com.amazonaws.route53#CidrCollectionVersionMismatchException":
            throw await deserializeAws_restXmlCidrCollectionVersionMismatchExceptionResponse(parsedOutput, context);
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlChangeResourceRecordSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlChangeResourceRecordSetsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlChangeResourceRecordSetsCommand = deserializeAws_restXmlChangeResourceRecordSetsCommand;
const deserializeAws_restXmlChangeResourceRecordSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidChangeBatch":
        case "com.amazonaws.route53#InvalidChangeBatch":
            throw await deserializeAws_restXmlInvalidChangeBatchResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlChangeTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlChangeTagsForResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlChangeTagsForResourceCommand = deserializeAws_restXmlChangeTagsForResourceCommand;
const deserializeAws_restXmlChangeTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.route53#ThrottlingException":
            throw await deserializeAws_restXmlThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateCidrCollectionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Collection"] !== undefined) {
        contents.Collection = deserializeAws_restXmlCidrCollection(data["Collection"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateCidrCollectionCommand = deserializeAws_restXmlCreateCidrCollectionCommand;
const deserializeAws_restXmlCreateCidrCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CidrCollectionAlreadyExistsException":
        case "com.amazonaws.route53#CidrCollectionAlreadyExistsException":
            throw await deserializeAws_restXmlCidrCollectionAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateHealthCheckCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheck"] !== undefined) {
        contents.HealthCheck = deserializeAws_restXmlHealthCheck(data["HealthCheck"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateHealthCheckCommand = deserializeAws_restXmlCreateHealthCheckCommand;
const deserializeAws_restXmlCreateHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HealthCheckAlreadyExists":
        case "com.amazonaws.route53#HealthCheckAlreadyExists":
            throw await deserializeAws_restXmlHealthCheckAlreadyExistsResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "TooManyHealthChecks":
        case "com.amazonaws.route53#TooManyHealthChecks":
            throw await deserializeAws_restXmlTooManyHealthChecksResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateHostedZoneCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
    }
    if (data["HostedZone"] !== undefined) {
        contents.HostedZone = deserializeAws_restXmlHostedZone(data["HostedZone"], context);
    }
    if (data["VPC"] !== undefined) {
        contents.VPC = deserializeAws_restXmlVPC(data["VPC"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateHostedZoneCommand = deserializeAws_restXmlCreateHostedZoneCommand;
const deserializeAws_restXmlCreateHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictingDomainExists":
        case "com.amazonaws.route53#ConflictingDomainExists":
            throw await deserializeAws_restXmlConflictingDomainExistsResponse(parsedOutput, context);
        case "DelegationSetNotAvailable":
        case "com.amazonaws.route53#DelegationSetNotAvailable":
            throw await deserializeAws_restXmlDelegationSetNotAvailableResponse(parsedOutput, context);
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context);
        case "HostedZoneAlreadyExists":
        case "com.amazonaws.route53#HostedZoneAlreadyExists":
            throw await deserializeAws_restXmlHostedZoneAlreadyExistsResponse(parsedOutput, context);
        case "InvalidDomainName":
        case "com.amazonaws.route53#InvalidDomainName":
            throw await deserializeAws_restXmlInvalidDomainNameResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context);
        case "TooManyHostedZones":
        case "com.amazonaws.route53#TooManyHostedZones":
            throw await deserializeAws_restXmlTooManyHostedZonesResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateKeySigningKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    if (data["KeySigningKey"] !== undefined) {
        contents.KeySigningKey = deserializeAws_restXmlKeySigningKey(data["KeySigningKey"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateKeySigningKeyCommand = deserializeAws_restXmlCreateKeySigningKeyCommand;
const deserializeAws_restXmlCreateKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context);
        case "InvalidKeySigningKeyName":
        case "com.amazonaws.route53#InvalidKeySigningKeyName":
            throw await deserializeAws_restXmlInvalidKeySigningKeyNameResponse(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context);
        case "KeySigningKeyAlreadyExists":
        case "com.amazonaws.route53#KeySigningKeyAlreadyExists":
            throw await deserializeAws_restXmlKeySigningKeyAlreadyExistsResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "TooManyKeySigningKeys":
        case "com.amazonaws.route53#TooManyKeySigningKeys":
            throw await deserializeAws_restXmlTooManyKeySigningKeysResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateQueryLoggingConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["QueryLoggingConfig"] !== undefined) {
        contents.QueryLoggingConfig = deserializeAws_restXmlQueryLoggingConfig(data["QueryLoggingConfig"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateQueryLoggingConfigCommand = deserializeAws_restXmlCreateQueryLoggingConfigCommand;
const deserializeAws_restXmlCreateQueryLoggingConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InsufficientCloudWatchLogsResourcePolicy":
        case "com.amazonaws.route53#InsufficientCloudWatchLogsResourcePolicy":
            throw await deserializeAws_restXmlInsufficientCloudWatchLogsResourcePolicyResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchCloudWatchLogsLogGroup":
        case "com.amazonaws.route53#NoSuchCloudWatchLogsLogGroup":
            throw await deserializeAws_restXmlNoSuchCloudWatchLogsLogGroupResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "QueryLoggingConfigAlreadyExists":
        case "com.amazonaws.route53#QueryLoggingConfigAlreadyExists":
            throw await deserializeAws_restXmlQueryLoggingConfigAlreadyExistsResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateReusableDelegationSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateReusableDelegationSetCommand = deserializeAws_restXmlCreateReusableDelegationSetCommand;
const deserializeAws_restXmlCreateReusableDelegationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetAlreadyCreated":
        case "com.amazonaws.route53#DelegationSetAlreadyCreated":
            throw await deserializeAws_restXmlDelegationSetAlreadyCreatedResponse(parsedOutput, context);
        case "DelegationSetAlreadyReusable":
        case "com.amazonaws.route53#DelegationSetAlreadyReusable":
            throw await deserializeAws_restXmlDelegationSetAlreadyReusableResponse(parsedOutput, context);
        case "DelegationSetNotAvailable":
        case "com.amazonaws.route53#DelegationSetNotAvailable":
            throw await deserializeAws_restXmlDelegationSetNotAvailableResponse(parsedOutput, context);
        case "HostedZoneNotFound":
        case "com.amazonaws.route53#HostedZoneNotFound":
            throw await deserializeAws_restXmlHostedZoneNotFoundResponse(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "LimitsExceeded":
        case "com.amazonaws.route53#LimitsExceeded":
            throw await deserializeAws_restXmlLimitsExceededResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateTrafficPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateTrafficPolicyCommand = deserializeAws_restXmlCreateTrafficPolicyCommand;
const deserializeAws_restXmlCreateTrafficPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidTrafficPolicyDocument":
        case "com.amazonaws.route53#InvalidTrafficPolicyDocument":
            throw await deserializeAws_restXmlInvalidTrafficPolicyDocumentResponse(parsedOutput, context);
        case "TooManyTrafficPolicies":
        case "com.amazonaws.route53#TooManyTrafficPolicies":
            throw await deserializeAws_restXmlTooManyTrafficPoliciesResponse(parsedOutput, context);
        case "TrafficPolicyAlreadyExists":
        case "com.amazonaws.route53#TrafficPolicyAlreadyExists":
            throw await deserializeAws_restXmlTrafficPolicyAlreadyExistsResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstance = deserializeAws_restXmlTrafficPolicyInstance(data["TrafficPolicyInstance"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateTrafficPolicyInstanceCommand = deserializeAws_restXmlCreateTrafficPolicyInstanceCommand;
const deserializeAws_restXmlCreateTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        case "TooManyTrafficPolicyInstances":
        case "com.amazonaws.route53#TooManyTrafficPolicyInstances":
            throw await deserializeAws_restXmlTooManyTrafficPolicyInstancesResponse(parsedOutput, context);
        case "TrafficPolicyInstanceAlreadyExists":
        case "com.amazonaws.route53#TrafficPolicyInstanceAlreadyExists":
            throw await deserializeAws_restXmlTrafficPolicyInstanceAlreadyExistsResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateTrafficPolicyVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateTrafficPolicyVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]],
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateTrafficPolicyVersionCommand = deserializeAws_restXmlCreateTrafficPolicyVersionCommand;
const deserializeAws_restXmlCreateTrafficPolicyVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidTrafficPolicyDocument":
        case "com.amazonaws.route53#InvalidTrafficPolicyDocument":
            throw await deserializeAws_restXmlInvalidTrafficPolicyDocumentResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        case "TooManyTrafficPolicyVersionsForCurrentPolicy":
        case "com.amazonaws.route53#TooManyTrafficPolicyVersionsForCurrentPolicy":
            throw await deserializeAws_restXmlTooManyTrafficPolicyVersionsForCurrentPolicyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlCreateVPCAssociationAuthorizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateVPCAssociationAuthorizationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(data["HostedZoneId"]);
    }
    if (data["VPC"] !== undefined) {
        contents.VPC = deserializeAws_restXmlVPC(data["VPC"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlCreateVPCAssociationAuthorizationCommand = deserializeAws_restXmlCreateVPCAssociationAuthorizationCommand;
const deserializeAws_restXmlCreateVPCAssociationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "TooManyVPCAssociationAuthorizations":
        case "com.amazonaws.route53#TooManyVPCAssociationAuthorizations":
            throw await deserializeAws_restXmlTooManyVPCAssociationAuthorizationsResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeactivateKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeactivateKeySigningKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlDeactivateKeySigningKeyCommand = deserializeAws_restXmlDeactivateKeySigningKeyCommand;
const deserializeAws_restXmlDeactivateKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context);
        case "KeySigningKeyInParentDSRecord":
        case "com.amazonaws.route53#KeySigningKeyInParentDSRecord":
            throw await deserializeAws_restXmlKeySigningKeyInParentDSRecordResponse(parsedOutput, context);
        case "KeySigningKeyInUse":
        case "com.amazonaws.route53#KeySigningKeyInUse":
            throw await deserializeAws_restXmlKeySigningKeyInUseResponse(parsedOutput, context);
        case "NoSuchKeySigningKey":
        case "com.amazonaws.route53#NoSuchKeySigningKey":
            throw await deserializeAws_restXmlNoSuchKeySigningKeyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteCidrCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteCidrCollectionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlDeleteCidrCollectionCommand = deserializeAws_restXmlDeleteCidrCollectionCommand;
const deserializeAws_restXmlDeleteCidrCollectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CidrCollectionInUseException":
        case "com.amazonaws.route53#CidrCollectionInUseException":
            throw await deserializeAws_restXmlCidrCollectionInUseExceptionResponse(parsedOutput, context);
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteHealthCheckCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlDeleteHealthCheckCommand = deserializeAws_restXmlDeleteHealthCheckCommand;
const deserializeAws_restXmlDeleteHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HealthCheckInUse":
        case "com.amazonaws.route53#HealthCheckInUse":
            throw await deserializeAws_restXmlHealthCheckInUseResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteHostedZoneCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlDeleteHostedZoneCommand = deserializeAws_restXmlDeleteHostedZoneCommand;
const deserializeAws_restXmlDeleteHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HostedZoneNotEmpty":
        case "com.amazonaws.route53#HostedZoneNotEmpty":
            throw await deserializeAws_restXmlHostedZoneNotEmptyResponse(parsedOutput, context);
        case "InvalidDomainName":
        case "com.amazonaws.route53#InvalidDomainName":
            throw await deserializeAws_restXmlInvalidDomainNameResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteKeySigningKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteKeySigningKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlDeleteKeySigningKeyCommand = deserializeAws_restXmlDeleteKeySigningKeyCommand;
const deserializeAws_restXmlDeleteKeySigningKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context);
        case "InvalidSigningStatus":
        case "com.amazonaws.route53#InvalidSigningStatus":
            throw await deserializeAws_restXmlInvalidSigningStatusResponse(parsedOutput, context);
        case "NoSuchKeySigningKey":
        case "com.amazonaws.route53#NoSuchKeySigningKey":
            throw await deserializeAws_restXmlNoSuchKeySigningKeyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteQueryLoggingConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlDeleteQueryLoggingConfigCommand = deserializeAws_restXmlDeleteQueryLoggingConfigCommand;
const deserializeAws_restXmlDeleteQueryLoggingConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchQueryLoggingConfig":
        case "com.amazonaws.route53#NoSuchQueryLoggingConfig":
            throw await deserializeAws_restXmlNoSuchQueryLoggingConfigResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteReusableDelegationSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlDeleteReusableDelegationSetCommand = deserializeAws_restXmlDeleteReusableDelegationSetCommand;
const deserializeAws_restXmlDeleteReusableDelegationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetInUse":
        case "com.amazonaws.route53#DelegationSetInUse":
            throw await deserializeAws_restXmlDelegationSetInUseResponse(parsedOutput, context);
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteTrafficPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlDeleteTrafficPolicyCommand = deserializeAws_restXmlDeleteTrafficPolicyCommand;
const deserializeAws_restXmlDeleteTrafficPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        case "TrafficPolicyInUse":
        case "com.amazonaws.route53#TrafficPolicyInUse":
            throw await deserializeAws_restXmlTrafficPolicyInUseResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlDeleteTrafficPolicyInstanceCommand = deserializeAws_restXmlDeleteTrafficPolicyInstanceCommand;
const deserializeAws_restXmlDeleteTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommand = deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommand;
const deserializeAws_restXmlDeleteVPCAssociationAuthorizationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "VPCAssociationAuthorizationNotFound":
        case "com.amazonaws.route53#VPCAssociationAuthorizationNotFound":
            throw await deserializeAws_restXmlVPCAssociationAuthorizationNotFoundResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDisableHostedZoneDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDisableHostedZoneDNSSECCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlDisableHostedZoneDNSSECCommand = deserializeAws_restXmlDisableHostedZoneDNSSECCommand;
const deserializeAws_restXmlDisableHostedZoneDNSSECCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "DNSSECNotFound":
        case "com.amazonaws.route53#DNSSECNotFound":
            throw await deserializeAws_restXmlDNSSECNotFoundResponse(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context);
        case "KeySigningKeyInParentDSRecord":
        case "com.amazonaws.route53#KeySigningKeyInParentDSRecord":
            throw await deserializeAws_restXmlKeySigningKeyInParentDSRecordResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlDisassociateVPCFromHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDisassociateVPCFromHostedZoneCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlDisassociateVPCFromHostedZoneCommand = deserializeAws_restXmlDisassociateVPCFromHostedZoneCommand;
const deserializeAws_restXmlDisassociateVPCFromHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidVPCId":
        case "com.amazonaws.route53#InvalidVPCId":
            throw await deserializeAws_restXmlInvalidVPCIdResponse(parsedOutput, context);
        case "LastVPCAssociation":
        case "com.amazonaws.route53#LastVPCAssociation":
            throw await deserializeAws_restXmlLastVPCAssociationResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "VPCAssociationNotFound":
        case "com.amazonaws.route53#VPCAssociationNotFound":
            throw await deserializeAws_restXmlVPCAssociationNotFoundResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlEnableHostedZoneDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlEnableHostedZoneDNSSECCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlEnableHostedZoneDNSSECCommand = deserializeAws_restXmlEnableHostedZoneDNSSECCommand;
const deserializeAws_restXmlEnableHostedZoneDNSSECCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "DNSSECNotFound":
        case "com.amazonaws.route53#DNSSECNotFound":
            throw await deserializeAws_restXmlDNSSECNotFoundResponse(parsedOutput, context);
        case "HostedZonePartiallyDelegated":
        case "com.amazonaws.route53#HostedZonePartiallyDelegated":
            throw await deserializeAws_restXmlHostedZonePartiallyDelegatedResponse(parsedOutput, context);
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidKMSArn":
        case "com.amazonaws.route53#InvalidKMSArn":
            throw await deserializeAws_restXmlInvalidKMSArnResponse(parsedOutput, context);
        case "InvalidKeySigningKeyStatus":
        case "com.amazonaws.route53#InvalidKeySigningKeyStatus":
            throw await deserializeAws_restXmlInvalidKeySigningKeyStatusResponse(parsedOutput, context);
        case "KeySigningKeyWithActiveStatusNotFound":
        case "com.amazonaws.route53#KeySigningKeyWithActiveStatusNotFound":
            throw await deserializeAws_restXmlKeySigningKeyWithActiveStatusNotFoundResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetAccountLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetAccountLimitCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseLong)(data["Count"]);
    }
    if (data["Limit"] !== undefined) {
        contents.Limit = deserializeAws_restXmlAccountLimit(data["Limit"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetAccountLimitCommand = deserializeAws_restXmlGetAccountLimitCommand;
const deserializeAws_restXmlGetAccountLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetChangeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetChangeCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ChangeInfo"] !== undefined) {
        contents.ChangeInfo = deserializeAws_restXmlChangeInfo(data["ChangeInfo"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetChangeCommand = deserializeAws_restXmlGetChangeCommand;
const deserializeAws_restXmlGetChangeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchChange":
        case "com.amazonaws.route53#NoSuchChange":
            throw await deserializeAws_restXmlNoSuchChangeResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetCheckerIpRangesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetCheckerIpRangesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CheckerIpRanges === "") {
        contents.CheckerIpRanges = [];
    }
    else if (data["CheckerIpRanges"] !== undefined && data["CheckerIpRanges"]["member"] !== undefined) {
        contents.CheckerIpRanges = deserializeAws_restXmlCheckerIpRanges((0, smithy_client_1.getArrayIfSingleItem)(data["CheckerIpRanges"]["member"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetCheckerIpRangesCommand = deserializeAws_restXmlGetCheckerIpRangesCommand;
const deserializeAws_restXmlGetCheckerIpRangesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: Route53ServiceException_1.Route53ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetDNSSECCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetDNSSECCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.KeySigningKeys === "") {
        contents.KeySigningKeys = [];
    }
    else if (data["KeySigningKeys"] !== undefined && data["KeySigningKeys"]["member"] !== undefined) {
        contents.KeySigningKeys = deserializeAws_restXmlKeySigningKeys((0, smithy_client_1.getArrayIfSingleItem)(data["KeySigningKeys"]["member"]), context);
    }
    if (data["Status"] !== undefined) {
        contents.Status = deserializeAws_restXmlDNSSECStatus(data["Status"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetDNSSECCommand = deserializeAws_restXmlGetDNSSECCommand;
const deserializeAws_restXmlGetDNSSECCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgument":
        case "com.amazonaws.route53#InvalidArgument":
            throw await deserializeAws_restXmlInvalidArgumentResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetGeoLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetGeoLocationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["GeoLocationDetails"] !== undefined) {
        contents.GeoLocationDetails = deserializeAws_restXmlGeoLocationDetails(data["GeoLocationDetails"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetGeoLocationCommand = deserializeAws_restXmlGetGeoLocationCommand;
const deserializeAws_restXmlGetGeoLocationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchGeoLocation":
        case "com.amazonaws.route53#NoSuchGeoLocation":
            throw await deserializeAws_restXmlNoSuchGeoLocationResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetHealthCheckCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheck"] !== undefined) {
        contents.HealthCheck = deserializeAws_restXmlHealthCheck(data["HealthCheck"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetHealthCheckCommand = deserializeAws_restXmlGetHealthCheckCommand;
const deserializeAws_restXmlGetHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IncompatibleVersion":
        case "com.amazonaws.route53#IncompatibleVersion":
            throw await deserializeAws_restXmlIncompatibleVersionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetHealthCheckCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetHealthCheckCountCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheckCount"] !== undefined) {
        contents.HealthCheckCount = (0, smithy_client_1.strictParseLong)(data["HealthCheckCount"]);
    }
    return contents;
};
exports.deserializeAws_restXmlGetHealthCheckCountCommand = deserializeAws_restXmlGetHealthCheckCountCommand;
const deserializeAws_restXmlGetHealthCheckCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: Route53ServiceException_1.Route53ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlGetHealthCheckLastFailureReasonCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetHealthCheckLastFailureReasonCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HealthCheckObservations === "") {
        contents.HealthCheckObservations = [];
    }
    else if (data["HealthCheckObservations"] !== undefined &&
        data["HealthCheckObservations"]["HealthCheckObservation"] !== undefined) {
        contents.HealthCheckObservations = deserializeAws_restXmlHealthCheckObservations((0, smithy_client_1.getArrayIfSingleItem)(data["HealthCheckObservations"]["HealthCheckObservation"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetHealthCheckLastFailureReasonCommand = deserializeAws_restXmlGetHealthCheckLastFailureReasonCommand;
const deserializeAws_restXmlGetHealthCheckLastFailureReasonCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetHealthCheckStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetHealthCheckStatusCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HealthCheckObservations === "") {
        contents.HealthCheckObservations = [];
    }
    else if (data["HealthCheckObservations"] !== undefined &&
        data["HealthCheckObservations"]["HealthCheckObservation"] !== undefined) {
        contents.HealthCheckObservations = deserializeAws_restXmlHealthCheckObservations((0, smithy_client_1.getArrayIfSingleItem)(data["HealthCheckObservations"]["HealthCheckObservation"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetHealthCheckStatusCommand = deserializeAws_restXmlGetHealthCheckStatusCommand;
const deserializeAws_restXmlGetHealthCheckStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetHostedZoneCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
    }
    if (data["HostedZone"] !== undefined) {
        contents.HostedZone = deserializeAws_restXmlHostedZone(data["HostedZone"], context);
    }
    if (data.VPCs === "") {
        contents.VPCs = [];
    }
    else if (data["VPCs"] !== undefined && data["VPCs"]["VPC"] !== undefined) {
        contents.VPCs = deserializeAws_restXmlVPCs((0, smithy_client_1.getArrayIfSingleItem)(data["VPCs"]["VPC"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetHostedZoneCommand = deserializeAws_restXmlGetHostedZoneCommand;
const deserializeAws_restXmlGetHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetHostedZoneCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetHostedZoneCountCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneCount"] !== undefined) {
        contents.HostedZoneCount = (0, smithy_client_1.strictParseLong)(data["HostedZoneCount"]);
    }
    return contents;
};
exports.deserializeAws_restXmlGetHostedZoneCountCommand = deserializeAws_restXmlGetHostedZoneCountCommand;
const deserializeAws_restXmlGetHostedZoneCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetHostedZoneLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetHostedZoneLimitCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseLong)(data["Count"]);
    }
    if (data["Limit"] !== undefined) {
        contents.Limit = deserializeAws_restXmlHostedZoneLimit(data["Limit"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetHostedZoneLimitCommand = deserializeAws_restXmlGetHostedZoneLimitCommand;
const deserializeAws_restXmlGetHostedZoneLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HostedZoneNotPrivate":
        case "com.amazonaws.route53#HostedZoneNotPrivate":
            throw await deserializeAws_restXmlHostedZoneNotPrivateResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetQueryLoggingConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetQueryLoggingConfigCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["QueryLoggingConfig"] !== undefined) {
        contents.QueryLoggingConfig = deserializeAws_restXmlQueryLoggingConfig(data["QueryLoggingConfig"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetQueryLoggingConfigCommand = deserializeAws_restXmlGetQueryLoggingConfigCommand;
const deserializeAws_restXmlGetQueryLoggingConfigCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchQueryLoggingConfig":
        case "com.amazonaws.route53#NoSuchQueryLoggingConfig":
            throw await deserializeAws_restXmlNoSuchQueryLoggingConfigResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetReusableDelegationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetReusableDelegationSetCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DelegationSet"] !== undefined) {
        contents.DelegationSet = deserializeAws_restXmlDelegationSet(data["DelegationSet"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetReusableDelegationSetCommand = deserializeAws_restXmlGetReusableDelegationSetCommand;
const deserializeAws_restXmlGetReusableDelegationSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetReusableDelegationSetLimitCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetReusableDelegationSetLimitCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Count"] !== undefined) {
        contents.Count = (0, smithy_client_1.strictParseLong)(data["Count"]);
    }
    if (data["Limit"] !== undefined) {
        contents.Limit = deserializeAws_restXmlReusableDelegationSetLimit(data["Limit"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetReusableDelegationSetLimitCommand = deserializeAws_restXmlGetReusableDelegationSetLimitCommand;
const deserializeAws_restXmlGetReusableDelegationSetLimitCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetTrafficPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetTrafficPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetTrafficPolicyCommand = deserializeAws_restXmlGetTrafficPolicyCommand;
const deserializeAws_restXmlGetTrafficPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstance = deserializeAws_restXmlTrafficPolicyInstance(data["TrafficPolicyInstance"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlGetTrafficPolicyInstanceCommand = deserializeAws_restXmlGetTrafficPolicyInstanceCommand;
const deserializeAws_restXmlGetTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlGetTrafficPolicyInstanceCountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetTrafficPolicyInstanceCountCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstanceCount"] !== undefined) {
        contents.TrafficPolicyInstanceCount = (0, smithy_client_1.strictParseInt32)(data["TrafficPolicyInstanceCount"]);
    }
    return contents;
};
exports.deserializeAws_restXmlGetTrafficPolicyInstanceCountCommand = deserializeAws_restXmlGetTrafficPolicyInstanceCountCommand;
const deserializeAws_restXmlGetTrafficPolicyInstanceCountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: Route53ServiceException_1.Route53ServiceException,
        errorCode,
    });
};
const deserializeAws_restXmlListCidrBlocksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListCidrBlocksCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CidrBlocks === "") {
        contents.CidrBlocks = [];
    }
    else if (data["CidrBlocks"] !== undefined && data["CidrBlocks"]["member"] !== undefined) {
        contents.CidrBlocks = deserializeAws_restXmlCidrBlockSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["CidrBlocks"]["member"]), context);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListCidrBlocksCommand = deserializeAws_restXmlListCidrBlocksCommand;
const deserializeAws_restXmlListCidrBlocksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context);
        case "NoSuchCidrLocationException":
        case "com.amazonaws.route53#NoSuchCidrLocationException":
            throw await deserializeAws_restXmlNoSuchCidrLocationExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListCidrCollectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListCidrCollectionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CidrCollections === "") {
        contents.CidrCollections = [];
    }
    else if (data["CidrCollections"] !== undefined && data["CidrCollections"]["member"] !== undefined) {
        contents.CidrCollections = deserializeAws_restXmlCollectionSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["CidrCollections"]["member"]), context);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListCidrCollectionsCommand = deserializeAws_restXmlListCidrCollectionsCommand;
const deserializeAws_restXmlListCidrCollectionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListCidrLocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListCidrLocationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.CidrLocations === "") {
        contents.CidrLocations = [];
    }
    else if (data["CidrLocations"] !== undefined && data["CidrLocations"]["member"] !== undefined) {
        contents.CidrLocations = deserializeAws_restXmlLocationSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["CidrLocations"]["member"]), context);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListCidrLocationsCommand = deserializeAws_restXmlListCidrLocationsCommand;
const deserializeAws_restXmlListCidrLocationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchCidrCollectionException":
        case "com.amazonaws.route53#NoSuchCidrCollectionException":
            throw await deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListGeoLocationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListGeoLocationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.GeoLocationDetailsList === "") {
        contents.GeoLocationDetailsList = [];
    }
    else if (data["GeoLocationDetailsList"] !== undefined &&
        data["GeoLocationDetailsList"]["GeoLocationDetails"] !== undefined) {
        contents.GeoLocationDetailsList = deserializeAws_restXmlGeoLocationDetailsList((0, smithy_client_1.getArrayIfSingleItem)(data["GeoLocationDetailsList"]["GeoLocationDetails"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextContinentCode"] !== undefined) {
        contents.NextContinentCode = (0, smithy_client_1.expectString)(data["NextContinentCode"]);
    }
    if (data["NextCountryCode"] !== undefined) {
        contents.NextCountryCode = (0, smithy_client_1.expectString)(data["NextCountryCode"]);
    }
    if (data["NextSubdivisionCode"] !== undefined) {
        contents.NextSubdivisionCode = (0, smithy_client_1.expectString)(data["NextSubdivisionCode"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListGeoLocationsCommand = deserializeAws_restXmlListGeoLocationsCommand;
const deserializeAws_restXmlListGeoLocationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListHealthChecksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListHealthChecksCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HealthChecks === "") {
        contents.HealthChecks = [];
    }
    else if (data["HealthChecks"] !== undefined && data["HealthChecks"]["HealthCheck"] !== undefined) {
        contents.HealthChecks = deserializeAws_restXmlHealthChecks((0, smithy_client_1.getArrayIfSingleItem)(data["HealthChecks"]["HealthCheck"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextMarker"] !== undefined) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListHealthChecksCommand = deserializeAws_restXmlListHealthChecksCommand;
const deserializeAws_restXmlListHealthChecksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "IncompatibleVersion":
        case "com.amazonaws.route53#IncompatibleVersion":
            throw await deserializeAws_restXmlIncompatibleVersionResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListHostedZonesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListHostedZonesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HostedZones === "") {
        contents.HostedZones = [];
    }
    else if (data["HostedZones"] !== undefined && data["HostedZones"]["HostedZone"] !== undefined) {
        contents.HostedZones = deserializeAws_restXmlHostedZones((0, smithy_client_1.getArrayIfSingleItem)(data["HostedZones"]["HostedZone"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextMarker"] !== undefined) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListHostedZonesCommand = deserializeAws_restXmlListHostedZonesCommand;
const deserializeAws_restXmlListHostedZonesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DelegationSetNotReusable":
        case "com.amazonaws.route53#DelegationSetNotReusable":
            throw await deserializeAws_restXmlDelegationSetNotReusableResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchDelegationSet":
        case "com.amazonaws.route53#NoSuchDelegationSet":
            throw await deserializeAws_restXmlNoSuchDelegationSetResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListHostedZonesByNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListHostedZonesByNameCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["DNSName"] !== undefined) {
        contents.DNSName = (0, smithy_client_1.expectString)(data["DNSName"]);
    }
    if (data["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(data["HostedZoneId"]);
    }
    if (data.HostedZones === "") {
        contents.HostedZones = [];
    }
    else if (data["HostedZones"] !== undefined && data["HostedZones"]["HostedZone"] !== undefined) {
        contents.HostedZones = deserializeAws_restXmlHostedZones((0, smithy_client_1.getArrayIfSingleItem)(data["HostedZones"]["HostedZone"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextDNSName"] !== undefined) {
        contents.NextDNSName = (0, smithy_client_1.expectString)(data["NextDNSName"]);
    }
    if (data["NextHostedZoneId"] !== undefined) {
        contents.NextHostedZoneId = (0, smithy_client_1.expectString)(data["NextHostedZoneId"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListHostedZonesByNameCommand = deserializeAws_restXmlListHostedZonesByNameCommand;
const deserializeAws_restXmlListHostedZonesByNameCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDomainName":
        case "com.amazonaws.route53#InvalidDomainName":
            throw await deserializeAws_restXmlInvalidDomainNameResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListHostedZonesByVPCCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListHostedZonesByVPCCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.HostedZoneSummaries === "") {
        contents.HostedZoneSummaries = [];
    }
    else if (data["HostedZoneSummaries"] !== undefined &&
        data["HostedZoneSummaries"]["HostedZoneSummary"] !== undefined) {
        contents.HostedZoneSummaries = deserializeAws_restXmlHostedZoneSummaries((0, smithy_client_1.getArrayIfSingleItem)(data["HostedZoneSummaries"]["HostedZoneSummary"]), context);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListHostedZonesByVPCCommand = deserializeAws_restXmlListHostedZonesByVPCCommand;
const deserializeAws_restXmlListHostedZonesByVPCCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidPaginationToken":
        case "com.amazonaws.route53#InvalidPaginationToken":
            throw await deserializeAws_restXmlInvalidPaginationTokenResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListQueryLoggingConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListQueryLoggingConfigsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    if (data.QueryLoggingConfigs === "") {
        contents.QueryLoggingConfigs = [];
    }
    else if (data["QueryLoggingConfigs"] !== undefined &&
        data["QueryLoggingConfigs"]["QueryLoggingConfig"] !== undefined) {
        contents.QueryLoggingConfigs = deserializeAws_restXmlQueryLoggingConfigs((0, smithy_client_1.getArrayIfSingleItem)(data["QueryLoggingConfigs"]["QueryLoggingConfig"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListQueryLoggingConfigsCommand = deserializeAws_restXmlListQueryLoggingConfigsCommand;
const deserializeAws_restXmlListQueryLoggingConfigsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidPaginationToken":
        case "com.amazonaws.route53#InvalidPaginationToken":
            throw await deserializeAws_restXmlInvalidPaginationTokenResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListResourceRecordSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListResourceRecordSetsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextRecordIdentifier"] !== undefined) {
        contents.NextRecordIdentifier = (0, smithy_client_1.expectString)(data["NextRecordIdentifier"]);
    }
    if (data["NextRecordName"] !== undefined) {
        contents.NextRecordName = (0, smithy_client_1.expectString)(data["NextRecordName"]);
    }
    if (data["NextRecordType"] !== undefined) {
        contents.NextRecordType = (0, smithy_client_1.expectString)(data["NextRecordType"]);
    }
    if (data.ResourceRecordSets === "") {
        contents.ResourceRecordSets = [];
    }
    else if (data["ResourceRecordSets"] !== undefined &&
        data["ResourceRecordSets"]["ResourceRecordSet"] !== undefined) {
        contents.ResourceRecordSets = deserializeAws_restXmlResourceRecordSets((0, smithy_client_1.getArrayIfSingleItem)(data["ResourceRecordSets"]["ResourceRecordSet"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListResourceRecordSetsCommand = deserializeAws_restXmlListResourceRecordSetsCommand;
const deserializeAws_restXmlListResourceRecordSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListReusableDelegationSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListReusableDelegationSetsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.DelegationSets === "") {
        contents.DelegationSets = [];
    }
    else if (data["DelegationSets"] !== undefined && data["DelegationSets"]["DelegationSet"] !== undefined) {
        contents.DelegationSets = deserializeAws_restXmlDelegationSets((0, smithy_client_1.getArrayIfSingleItem)(data["DelegationSets"]["DelegationSet"]), context);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["NextMarker"] !== undefined) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListReusableDelegationSetsCommand = deserializeAws_restXmlListReusableDelegationSetsCommand;
const deserializeAws_restXmlListReusableDelegationSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListTagsForResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["ResourceTagSet"] !== undefined) {
        contents.ResourceTagSet = deserializeAws_restXmlResourceTagSet(data["ResourceTagSet"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlListTagsForResourceCommand = deserializeAws_restXmlListTagsForResourceCommand;
const deserializeAws_restXmlListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.route53#ThrottlingException":
            throw await deserializeAws_restXmlThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListTagsForResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListTagsForResourcesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ResourceTagSets === "") {
        contents.ResourceTagSets = [];
    }
    else if (data["ResourceTagSets"] !== undefined && data["ResourceTagSets"]["ResourceTagSet"] !== undefined) {
        contents.ResourceTagSets = deserializeAws_restXmlResourceTagSetList((0, smithy_client_1.getArrayIfSingleItem)(data["ResourceTagSets"]["ResourceTagSet"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListTagsForResourcesCommand = deserializeAws_restXmlListTagsForResourcesCommand;
const deserializeAws_restXmlListTagsForResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.route53#ThrottlingException":
            throw await deserializeAws_restXmlThrottlingExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListTrafficPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListTrafficPoliciesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyIdMarker"] !== undefined) {
        contents.TrafficPolicyIdMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyIdMarker"]);
    }
    if (data.TrafficPolicySummaries === "") {
        contents.TrafficPolicySummaries = [];
    }
    else if (data["TrafficPolicySummaries"] !== undefined &&
        data["TrafficPolicySummaries"]["TrafficPolicySummary"] !== undefined) {
        contents.TrafficPolicySummaries = deserializeAws_restXmlTrafficPolicySummaries((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicySummaries"]["TrafficPolicySummary"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListTrafficPoliciesCommand = deserializeAws_restXmlListTrafficPoliciesCommand;
const deserializeAws_restXmlListTrafficPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListTrafficPolicyInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListTrafficPolicyInstancesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneIdMarker"] !== undefined) {
        contents.HostedZoneIdMarker = (0, smithy_client_1.expectString)(data["HostedZoneIdMarker"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
        contents.TrafficPolicyInstanceNameMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceNameMarker"]);
    }
    if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
        contents.TrafficPolicyInstanceTypeMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceTypeMarker"]);
    }
    if (data.TrafficPolicyInstances === "") {
        contents.TrafficPolicyInstances = [];
    }
    else if (data["TrafficPolicyInstances"] !== undefined &&
        data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstances = deserializeAws_restXmlTrafficPolicyInstances((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListTrafficPolicyInstancesCommand = deserializeAws_restXmlListTrafficPolicyInstancesCommand;
const deserializeAws_restXmlListTrafficPolicyInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
        contents.TrafficPolicyInstanceNameMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceNameMarker"]);
    }
    if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
        contents.TrafficPolicyInstanceTypeMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceTypeMarker"]);
    }
    if (data.TrafficPolicyInstances === "") {
        contents.TrafficPolicyInstances = [];
    }
    else if (data["TrafficPolicyInstances"] !== undefined &&
        data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstances = deserializeAws_restXmlTrafficPolicyInstances((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand = deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommand;
const deserializeAws_restXmlListTrafficPolicyInstancesByHostedZoneCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneIdMarker"] !== undefined) {
        contents.HostedZoneIdMarker = (0, smithy_client_1.expectString)(data["HostedZoneIdMarker"]);
    }
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data["TrafficPolicyInstanceNameMarker"] !== undefined) {
        contents.TrafficPolicyInstanceNameMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceNameMarker"]);
    }
    if (data["TrafficPolicyInstanceTypeMarker"] !== undefined) {
        contents.TrafficPolicyInstanceTypeMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyInstanceTypeMarker"]);
    }
    if (data.TrafficPolicyInstances === "") {
        contents.TrafficPolicyInstances = [];
    }
    else if (data["TrafficPolicyInstances"] !== undefined &&
        data["TrafficPolicyInstances"]["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstances = deserializeAws_restXmlTrafficPolicyInstances((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicyInstances"]["TrafficPolicyInstance"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand = deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommand;
const deserializeAws_restXmlListTrafficPolicyInstancesByPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListTrafficPolicyVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListTrafficPolicyVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["IsTruncated"] !== undefined) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
    }
    if (data["MaxItems"] !== undefined) {
        contents.MaxItems = (0, smithy_client_1.strictParseInt32)(data["MaxItems"]);
    }
    if (data.TrafficPolicies === "") {
        contents.TrafficPolicies = [];
    }
    else if (data["TrafficPolicies"] !== undefined && data["TrafficPolicies"]["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicies = deserializeAws_restXmlTrafficPolicies((0, smithy_client_1.getArrayIfSingleItem)(data["TrafficPolicies"]["TrafficPolicy"]), context);
    }
    if (data["TrafficPolicyVersionMarker"] !== undefined) {
        contents.TrafficPolicyVersionMarker = (0, smithy_client_1.expectString)(data["TrafficPolicyVersionMarker"]);
    }
    return contents;
};
exports.deserializeAws_restXmlListTrafficPolicyVersionsCommand = deserializeAws_restXmlListTrafficPolicyVersionsCommand;
const deserializeAws_restXmlListTrafficPolicyVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlListVPCAssociationAuthorizationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListVPCAssociationAuthorizationsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(data["HostedZoneId"]);
    }
    if (data["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(data["NextToken"]);
    }
    if (data.VPCs === "") {
        contents.VPCs = [];
    }
    else if (data["VPCs"] !== undefined && data["VPCs"]["VPC"] !== undefined) {
        contents.VPCs = deserializeAws_restXmlVPCs((0, smithy_client_1.getArrayIfSingleItem)(data["VPCs"]["VPC"]), context);
    }
    return contents;
};
exports.deserializeAws_restXmlListVPCAssociationAuthorizationsCommand = deserializeAws_restXmlListVPCAssociationAuthorizationsCommand;
const deserializeAws_restXmlListVPCAssociationAuthorizationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "InvalidPaginationToken":
        case "com.amazonaws.route53#InvalidPaginationToken":
            throw await deserializeAws_restXmlInvalidPaginationTokenResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlTestDNSAnswerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlTestDNSAnswerCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["Nameserver"] !== undefined) {
        contents.Nameserver = (0, smithy_client_1.expectString)(data["Nameserver"]);
    }
    if (data["Protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(data["Protocol"]);
    }
    if (data.RecordData === "") {
        contents.RecordData = [];
    }
    else if (data["RecordData"] !== undefined && data["RecordData"]["RecordDataEntry"] !== undefined) {
        contents.RecordData = deserializeAws_restXmlRecordData((0, smithy_client_1.getArrayIfSingleItem)(data["RecordData"]["RecordDataEntry"]), context);
    }
    if (data["RecordName"] !== undefined) {
        contents.RecordName = (0, smithy_client_1.expectString)(data["RecordName"]);
    }
    if (data["RecordType"] !== undefined) {
        contents.RecordType = (0, smithy_client_1.expectString)(data["RecordType"]);
    }
    if (data["ResponseCode"] !== undefined) {
        contents.ResponseCode = (0, smithy_client_1.expectString)(data["ResponseCode"]);
    }
    return contents;
};
exports.deserializeAws_restXmlTestDNSAnswerCommand = deserializeAws_restXmlTestDNSAnswerCommand;
const deserializeAws_restXmlTestDNSAnswerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlUpdateHealthCheckCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUpdateHealthCheckCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HealthCheck"] !== undefined) {
        contents.HealthCheck = deserializeAws_restXmlHealthCheck(data["HealthCheck"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlUpdateHealthCheckCommand = deserializeAws_restXmlUpdateHealthCheckCommand;
const deserializeAws_restXmlUpdateHealthCheckCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "HealthCheckVersionMismatch":
        case "com.amazonaws.route53#HealthCheckVersionMismatch":
            throw await deserializeAws_restXmlHealthCheckVersionMismatchResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHealthCheck":
        case "com.amazonaws.route53#NoSuchHealthCheck":
            throw await deserializeAws_restXmlNoSuchHealthCheckResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlUpdateHostedZoneCommentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUpdateHostedZoneCommentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["HostedZone"] !== undefined) {
        contents.HostedZone = deserializeAws_restXmlHostedZone(data["HostedZone"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlUpdateHostedZoneCommentCommand = deserializeAws_restXmlUpdateHostedZoneCommentCommand;
const deserializeAws_restXmlUpdateHostedZoneCommentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchHostedZone":
        case "com.amazonaws.route53#NoSuchHostedZone":
            throw await deserializeAws_restXmlNoSuchHostedZoneResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlUpdateTrafficPolicyCommentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUpdateTrafficPolicyCommentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicy"] !== undefined) {
        contents.TrafficPolicy = deserializeAws_restXmlTrafficPolicy(data["TrafficPolicy"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlUpdateTrafficPolicyCommentCommand = deserializeAws_restXmlUpdateTrafficPolicyCommentCommand;
const deserializeAws_restXmlUpdateTrafficPolicyCommentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModification":
        case "com.amazonaws.route53#ConcurrentModification":
            throw await deserializeAws_restXmlConcurrentModificationResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restXmlUpdateTrafficPolicyInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUpdateTrafficPolicyInstanceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data["TrafficPolicyInstance"] !== undefined) {
        contents.TrafficPolicyInstance = deserializeAws_restXmlTrafficPolicyInstance(data["TrafficPolicyInstance"], context);
    }
    return contents;
};
exports.deserializeAws_restXmlUpdateTrafficPolicyInstanceCommand = deserializeAws_restXmlUpdateTrafficPolicyInstanceCommand;
const deserializeAws_restXmlUpdateTrafficPolicyInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictingTypes":
        case "com.amazonaws.route53#ConflictingTypes":
            throw await deserializeAws_restXmlConflictingTypesResponse(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.route53#InvalidInput":
            throw await deserializeAws_restXmlInvalidInputResponse(parsedOutput, context);
        case "NoSuchTrafficPolicy":
        case "com.amazonaws.route53#NoSuchTrafficPolicy":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyResponse(parsedOutput, context);
        case "NoSuchTrafficPolicyInstance":
        case "com.amazonaws.route53#NoSuchTrafficPolicyInstance":
            throw await deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse(parsedOutput, context);
        case "PriorRequestNotComplete":
        case "com.amazonaws.route53#PriorRequestNotComplete":
            throw await deserializeAws_restXmlPriorRequestNotCompleteResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: Route53ServiceException_1.Route53ServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const deserializeAws_restXmlCidrBlockInUseExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrBlockInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlCidrCollectionAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrCollectionAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlCidrCollectionInUseExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrCollectionInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlCidrCollectionVersionMismatchExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.CidrCollectionVersionMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlConcurrentModificationResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ConcurrentModification({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlConflictingDomainExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ConflictingDomainExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlConflictingTypesResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ConflictingTypes({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlDelegationSetAlreadyCreatedResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetAlreadyCreated({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlDelegationSetAlreadyReusableResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetAlreadyReusable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlDelegationSetInUseResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlDelegationSetNotAvailableResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetNotAvailable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlDelegationSetNotReusableResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DelegationSetNotReusable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlDNSSECNotFoundResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.DNSSECNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHealthCheckAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HealthCheckAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHealthCheckInUseResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HealthCheckInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHealthCheckVersionMismatchResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HealthCheckVersionMismatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHostedZoneAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHostedZoneNotEmptyResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneNotEmpty({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHostedZoneNotFoundResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHostedZoneNotPrivateResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZoneNotPrivate({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlHostedZonePartiallyDelegatedResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.HostedZonePartiallyDelegated({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlIncompatibleVersionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.IncompatibleVersion({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInsufficientCloudWatchLogsResourcePolicyResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InsufficientCloudWatchLogsResourcePolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidArgumentResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidArgument({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidChangeBatchResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    if (data.messages === "") {
        contents.messages = [];
    }
    else if (data["messages"] !== undefined && data["messages"]["Message"] !== undefined) {
        contents.messages = deserializeAws_restXmlErrorMessages((0, smithy_client_1.getArrayIfSingleItem)(data["messages"]["Message"]), context);
    }
    const exception = new models_0_1.InvalidChangeBatch({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidDomainNameResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidDomainName({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidInputResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidInput({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidKeySigningKeyNameResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidKeySigningKeyName({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidKeySigningKeyStatusResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidKeySigningKeyStatus({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidKMSArnResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidKMSArn({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidPaginationTokenResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidPaginationToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidSigningStatusResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidSigningStatus({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidTrafficPolicyDocumentResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidTrafficPolicyDocument({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlInvalidVPCIdResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.InvalidVPCId({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlKeySigningKeyAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlKeySigningKeyInParentDSRecordResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyInParentDSRecord({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlKeySigningKeyInUseResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlKeySigningKeyWithActiveStatusNotFoundResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.KeySigningKeyWithActiveStatusNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlLastVPCAssociationResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.LastVPCAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlLimitsExceededResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.LimitsExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchChangeResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchChange({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchCidrCollectionExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.NoSuchCidrCollectionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchCidrLocationExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(data["Message"]);
    }
    const exception = new models_0_1.NoSuchCidrLocationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchCloudWatchLogsLogGroupResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchCloudWatchLogsLogGroup({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchDelegationSetResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchDelegationSet({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchGeoLocationResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchGeoLocation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchHealthCheckResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchHealthCheck({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchHostedZoneResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchHostedZone({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchKeySigningKeyResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchKeySigningKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchQueryLoggingConfigResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchQueryLoggingConfig({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchTrafficPolicyResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchTrafficPolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNoSuchTrafficPolicyInstanceResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NoSuchTrafficPolicyInstance({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlNotAuthorizedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlPriorRequestNotCompleteResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.PriorRequestNotComplete({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlPublicZoneVPCAssociationResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.PublicZoneVPCAssociation({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlQueryLoggingConfigAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.QueryLoggingConfigAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlThrottlingExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTooManyHealthChecksResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyHealthChecks({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTooManyHostedZonesResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyHostedZones({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTooManyKeySigningKeysResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyKeySigningKeys({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTooManyTrafficPoliciesResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyTrafficPolicies({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTooManyTrafficPolicyInstancesResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyTrafficPolicyInstances({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTooManyTrafficPolicyVersionsForCurrentPolicyResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyTrafficPolicyVersionsForCurrentPolicy({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTooManyVPCAssociationAuthorizationsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TooManyVPCAssociationAuthorizations({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTrafficPolicyAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TrafficPolicyAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTrafficPolicyInstanceAlreadyExistsResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TrafficPolicyInstanceAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlTrafficPolicyInUseResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.TrafficPolicyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlVPCAssociationAuthorizationNotFoundResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.VPCAssociationAuthorizationNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const deserializeAws_restXmlVPCAssociationNotFoundResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body.Error;
    if (data["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(data["message"]);
    }
    const exception = new models_0_1.VPCAssociationNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body.Error);
};
const serializeAws_restXmlAlarmIdentifier = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AlarmIdentifier");
    if (input.Region != null) {
        const node = xml_builder_1.XmlNode.of("CloudWatchRegion", input.Region).withName("Region");
        bodyNode.addChildNode(node);
    }
    if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("AlarmName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlAliasTarget = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("AliasTarget");
    if (input.HostedZoneId != null) {
        const node = xml_builder_1.XmlNode.of("ResourceId", input.HostedZoneId).withName("HostedZoneId");
        bodyNode.addChildNode(node);
    }
    if (input.DNSName != null) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.DNSName).withName("DNSName");
        bodyNode.addChildNode(node);
    }
    if (input.EvaluateTargetHealth != null) {
        const node = xml_builder_1.XmlNode
            .of("AliasHealthEnabled", String(input.EvaluateTargetHealth))
            .withName("EvaluateTargetHealth");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlChange = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Change");
    if (input.Action != null) {
        const node = xml_builder_1.XmlNode.of("ChangeAction", input.Action).withName("Action");
        bodyNode.addChildNode(node);
    }
    if (input.ResourceRecordSet != null) {
        const node = serializeAws_restXmlResourceRecordSet(input.ResourceRecordSet, context).withName("ResourceRecordSet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlChangeBatch = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ChangeBatch");
    if (input.Comment != null) {
        const node = xml_builder_1.XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.Changes != null) {
        const nodes = serializeAws_restXmlChanges(input.Changes, context);
        const containerNode = new xml_builder_1.XmlNode("Changes");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const serializeAws_restXmlChanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlChange(entry, context);
        return node.withName("Change");
    });
};
const serializeAws_restXmlChildHealthCheckList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("HealthCheckId", entry);
        return node.withName("ChildHealthCheck");
    });
};
const serializeAws_restXmlCidrCollectionChange = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CidrCollectionChange");
    if (input.LocationName != null) {
        const node = xml_builder_1.XmlNode.of("CidrLocationNameDefaultNotAllowed", input.LocationName).withName("LocationName");
        bodyNode.addChildNode(node);
    }
    if (input.Action != null) {
        const node = xml_builder_1.XmlNode.of("CidrCollectionChangeAction", input.Action).withName("Action");
        bodyNode.addChildNode(node);
    }
    if (input.CidrList != null) {
        const nodes = serializeAws_restXmlCidrList(input.CidrList, context);
        const containerNode = new xml_builder_1.XmlNode("CidrList");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
};
const serializeAws_restXmlCidrCollectionChanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlCidrCollectionChange(entry, context);
        return node.withName("member");
    });
};
const serializeAws_restXmlCidrList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("Cidr", entry);
        return node.withName("Cidr");
    });
};
const serializeAws_restXmlCidrRoutingConfig = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("CidrRoutingConfig");
    if (input.CollectionId != null) {
        const node = xml_builder_1.XmlNode.of("UUID", input.CollectionId).withName("CollectionId");
        bodyNode.addChildNode(node);
    }
    if (input.LocationName != null) {
        const node = xml_builder_1.XmlNode.of("CidrLocationNameDefaultAllowed", input.LocationName).withName("LocationName");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlGeoLocation = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("GeoLocation");
    if (input.ContinentCode != null) {
        const node = xml_builder_1.XmlNode.of("GeoLocationContinentCode", input.ContinentCode).withName("ContinentCode");
        bodyNode.addChildNode(node);
    }
    if (input.CountryCode != null) {
        const node = xml_builder_1.XmlNode.of("GeoLocationCountryCode", input.CountryCode).withName("CountryCode");
        bodyNode.addChildNode(node);
    }
    if (input.SubdivisionCode != null) {
        const node = xml_builder_1.XmlNode.of("GeoLocationSubdivisionCode", input.SubdivisionCode).withName("SubdivisionCode");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlHealthCheckConfig = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("HealthCheckConfig");
    if (input.IPAddress != null) {
        const node = xml_builder_1.XmlNode.of("IPAddress", input.IPAddress).withName("IPAddress");
        bodyNode.addChildNode(node);
    }
    if (input.Port != null) {
        const node = xml_builder_1.XmlNode.of("Port", String(input.Port)).withName("Port");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("HealthCheckType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.ResourcePath != null) {
        const node = xml_builder_1.XmlNode.of("ResourcePath", input.ResourcePath).withName("ResourcePath");
        bodyNode.addChildNode(node);
    }
    if (input.FullyQualifiedDomainName != null) {
        const node = xml_builder_1.XmlNode
            .of("FullyQualifiedDomainName", input.FullyQualifiedDomainName)
            .withName("FullyQualifiedDomainName");
        bodyNode.addChildNode(node);
    }
    if (input.SearchString != null) {
        const node = xml_builder_1.XmlNode.of("SearchString", input.SearchString).withName("SearchString");
        bodyNode.addChildNode(node);
    }
    if (input.RequestInterval != null) {
        const node = xml_builder_1.XmlNode.of("RequestInterval", String(input.RequestInterval)).withName("RequestInterval");
        bodyNode.addChildNode(node);
    }
    if (input.FailureThreshold != null) {
        const node = xml_builder_1.XmlNode.of("FailureThreshold", String(input.FailureThreshold)).withName("FailureThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.MeasureLatency != null) {
        const node = xml_builder_1.XmlNode.of("MeasureLatency", String(input.MeasureLatency)).withName("MeasureLatency");
        bodyNode.addChildNode(node);
    }
    if (input.Inverted != null) {
        const node = xml_builder_1.XmlNode.of("Inverted", String(input.Inverted)).withName("Inverted");
        bodyNode.addChildNode(node);
    }
    if (input.Disabled != null) {
        const node = xml_builder_1.XmlNode.of("Disabled", String(input.Disabled)).withName("Disabled");
        bodyNode.addChildNode(node);
    }
    if (input.HealthThreshold != null) {
        const node = xml_builder_1.XmlNode.of("HealthThreshold", String(input.HealthThreshold)).withName("HealthThreshold");
        bodyNode.addChildNode(node);
    }
    if (input.ChildHealthChecks != null) {
        const nodes = serializeAws_restXmlChildHealthCheckList(input.ChildHealthChecks, context);
        const containerNode = new xml_builder_1.XmlNode("ChildHealthChecks");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.EnableSNI != null) {
        const node = xml_builder_1.XmlNode.of("EnableSNI", String(input.EnableSNI)).withName("EnableSNI");
        bodyNode.addChildNode(node);
    }
    if (input.Regions != null) {
        const nodes = serializeAws_restXmlHealthCheckRegionList(input.Regions, context);
        const containerNode = new xml_builder_1.XmlNode("Regions");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.AlarmIdentifier != null) {
        const node = serializeAws_restXmlAlarmIdentifier(input.AlarmIdentifier, context).withName("AlarmIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.InsufficientDataHealthStatus != null) {
        const node = xml_builder_1.XmlNode
            .of("InsufficientDataHealthStatus", input.InsufficientDataHealthStatus)
            .withName("InsufficientDataHealthStatus");
        bodyNode.addChildNode(node);
    }
    if (input.RoutingControlArn != null) {
        const node = xml_builder_1.XmlNode.of("RoutingControlArn", input.RoutingControlArn).withName("RoutingControlArn");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlHealthCheckRegionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("HealthCheckRegion", entry);
        return node.withName("Region");
    });
};
const serializeAws_restXmlHostedZoneConfig = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("HostedZoneConfig");
    if (input.Comment != null) {
        const node = xml_builder_1.XmlNode.of("ResourceDescription", input.Comment).withName("Comment");
        bodyNode.addChildNode(node);
    }
    if (input.PrivateZone != null) {
        const node = xml_builder_1.XmlNode.of("IsPrivateZone", String(input.PrivateZone)).withName("PrivateZone");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlResettableElementNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("ResettableElementName", entry);
        return node.withName("ResettableElementName");
    });
};
const serializeAws_restXmlResourceRecord = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ResourceRecord");
    if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("RData", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlResourceRecords = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlResourceRecord(entry, context);
        return node.withName("ResourceRecord");
    });
};
const serializeAws_restXmlResourceRecordSet = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("ResourceRecordSet");
    if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("DNSName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("RRType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.SetIdentifier != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetIdentifier", input.SetIdentifier).withName("SetIdentifier");
        bodyNode.addChildNode(node);
    }
    if (input.Weight != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetWeight", String(input.Weight)).withName("Weight");
        bodyNode.addChildNode(node);
    }
    if (input.Region != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetRegion", input.Region).withName("Region");
        bodyNode.addChildNode(node);
    }
    if (input.GeoLocation != null) {
        const node = serializeAws_restXmlGeoLocation(input.GeoLocation, context).withName("GeoLocation");
        bodyNode.addChildNode(node);
    }
    if (input.Failover != null) {
        const node = xml_builder_1.XmlNode.of("ResourceRecordSetFailover", input.Failover).withName("Failover");
        bodyNode.addChildNode(node);
    }
    if (input.MultiValueAnswer != null) {
        const node = xml_builder_1.XmlNode
            .of("ResourceRecordSetMultiValueAnswer", String(input.MultiValueAnswer))
            .withName("MultiValueAnswer");
        bodyNode.addChildNode(node);
    }
    if (input.TTL != null) {
        const node = xml_builder_1.XmlNode.of("TTL", String(input.TTL)).withName("TTL");
        bodyNode.addChildNode(node);
    }
    if (input.ResourceRecords != null) {
        const nodes = serializeAws_restXmlResourceRecords(input.ResourceRecords, context);
        const containerNode = new xml_builder_1.XmlNode("ResourceRecords");
        nodes.map((node) => {
            containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
    }
    if (input.AliasTarget != null) {
        const node = serializeAws_restXmlAliasTarget(input.AliasTarget, context).withName("AliasTarget");
        bodyNode.addChildNode(node);
    }
    if (input.HealthCheckId != null) {
        const node = xml_builder_1.XmlNode.of("HealthCheckId", input.HealthCheckId).withName("HealthCheckId");
        bodyNode.addChildNode(node);
    }
    if (input.TrafficPolicyInstanceId != null) {
        const node = xml_builder_1.XmlNode
            .of("TrafficPolicyInstanceId", input.TrafficPolicyInstanceId)
            .withName("TrafficPolicyInstanceId");
        bodyNode.addChildNode(node);
    }
    if (input.CidrRoutingConfig != null) {
        const node = serializeAws_restXmlCidrRoutingConfig(input.CidrRoutingConfig, context).withName("CidrRoutingConfig");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTag = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("Tag");
    if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("TagKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("TagValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const serializeAws_restXmlTagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("TagKey", entry);
        return node.withName("Key");
    });
};
const serializeAws_restXmlTagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = serializeAws_restXmlTag(entry, context);
        return node.withName("Tag");
    });
};
const serializeAws_restXmlTagResourceIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        const node = xml_builder_1.XmlNode.of("TagResourceId", entry);
        return node.withName("ResourceId");
    });
};
const serializeAws_restXmlVPC = (input, context) => {
    const bodyNode = new xml_builder_1.XmlNode("VPC");
    if (input.VPCRegion != null) {
        const node = xml_builder_1.XmlNode.of("VPCRegion", input.VPCRegion).withName("VPCRegion");
        bodyNode.addChildNode(node);
    }
    if (input.VPCId != null) {
        const node = xml_builder_1.XmlNode.of("VPCId", input.VPCId).withName("VPCId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
const deserializeAws_restXmlAccountLimit = (output, context) => {
    const contents = {
        Type: undefined,
        Value: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseLong)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlAlarmIdentifier = (output, context) => {
    const contents = {
        Region: undefined,
        Name: undefined,
    };
    if (output["Region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const deserializeAws_restXmlAliasTarget = (output, context) => {
    const contents = {
        HostedZoneId: undefined,
        DNSName: undefined,
        EvaluateTargetHealth: undefined,
    };
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["DNSName"] !== undefined) {
        contents.DNSName = (0, smithy_client_1.expectString)(output["DNSName"]);
    }
    if (output["EvaluateTargetHealth"] !== undefined) {
        contents.EvaluateTargetHealth = (0, smithy_client_1.parseBoolean)(output["EvaluateTargetHealth"]);
    }
    return contents;
};
const deserializeAws_restXmlChangeInfo = (output, context) => {
    const contents = {
        Id: undefined,
        Status: undefined,
        SubmittedAt: undefined,
        Comment: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["SubmittedAt"] !== undefined) {
        contents.SubmittedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SubmittedAt"]));
    }
    if (output["Comment"] !== undefined) {
        contents.Comment = (0, smithy_client_1.expectString)(output["Comment"]);
    }
    return contents;
};
const deserializeAws_restXmlCheckerIpRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_restXmlChildHealthCheckList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_restXmlCidrBlockSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlCidrBlockSummary(entry, context);
    });
};
const deserializeAws_restXmlCidrBlockSummary = (output, context) => {
    const contents = {
        CidrBlock: undefined,
        LocationName: undefined,
    };
    if (output["CidrBlock"] !== undefined) {
        contents.CidrBlock = (0, smithy_client_1.expectString)(output["CidrBlock"]);
    }
    if (output["LocationName"] !== undefined) {
        contents.LocationName = (0, smithy_client_1.expectString)(output["LocationName"]);
    }
    return contents;
};
const deserializeAws_restXmlCidrCollection = (output, context) => {
    const contents = {
        Arn: undefined,
        Id: undefined,
        Name: undefined,
        Version: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.strictParseLong)(output["Version"]);
    }
    return contents;
};
const deserializeAws_restXmlCidrRoutingConfig = (output, context) => {
    const contents = {
        CollectionId: undefined,
        LocationName: undefined,
    };
    if (output["CollectionId"] !== undefined) {
        contents.CollectionId = (0, smithy_client_1.expectString)(output["CollectionId"]);
    }
    if (output["LocationName"] !== undefined) {
        contents.LocationName = (0, smithy_client_1.expectString)(output["LocationName"]);
    }
    return contents;
};
const deserializeAws_restXmlCloudWatchAlarmConfiguration = (output, context) => {
    const contents = {
        EvaluationPeriods: undefined,
        Threshold: undefined,
        ComparisonOperator: undefined,
        Period: undefined,
        MetricName: undefined,
        Namespace: undefined,
        Statistic: undefined,
        Dimensions: undefined,
    };
    if (output["EvaluationPeriods"] !== undefined) {
        contents.EvaluationPeriods = (0, smithy_client_1.strictParseInt32)(output["EvaluationPeriods"]);
    }
    if (output["Threshold"] !== undefined) {
        contents.Threshold = (0, smithy_client_1.strictParseFloat)(output["Threshold"]);
    }
    if (output["ComparisonOperator"] !== undefined) {
        contents.ComparisonOperator = (0, smithy_client_1.expectString)(output["ComparisonOperator"]);
    }
    if (output["Period"] !== undefined) {
        contents.Period = (0, smithy_client_1.strictParseInt32)(output["Period"]);
    }
    if (output["MetricName"] !== undefined) {
        contents.MetricName = (0, smithy_client_1.expectString)(output["MetricName"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = (0, smithy_client_1.expectString)(output["Namespace"]);
    }
    if (output["Statistic"] !== undefined) {
        contents.Statistic = (0, smithy_client_1.expectString)(output["Statistic"]);
    }
    if (output.Dimensions === "") {
        contents.Dimensions = [];
    }
    else if (output["Dimensions"] !== undefined && output["Dimensions"]["Dimension"] !== undefined) {
        contents.Dimensions = deserializeAws_restXmlDimensionList((0, smithy_client_1.getArrayIfSingleItem)(output["Dimensions"]["Dimension"]), context);
    }
    return contents;
};
const deserializeAws_restXmlCollectionSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlCollectionSummary(entry, context);
    });
};
const deserializeAws_restXmlCollectionSummary = (output, context) => {
    const contents = {
        Arn: undefined,
        Id: undefined,
        Name: undefined,
        Version: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
    }
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.strictParseLong)(output["Version"]);
    }
    return contents;
};
const deserializeAws_restXmlDelegationSet = (output, context) => {
    const contents = {
        Id: undefined,
        CallerReference: undefined,
        NameServers: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = (0, smithy_client_1.expectString)(output["CallerReference"]);
    }
    if (output.NameServers === "") {
        contents.NameServers = [];
    }
    else if (output["NameServers"] !== undefined && output["NameServers"]["NameServer"] !== undefined) {
        contents.NameServers = deserializeAws_restXmlDelegationSetNameServers((0, smithy_client_1.getArrayIfSingleItem)(output["NameServers"]["NameServer"]), context);
    }
    return contents;
};
const deserializeAws_restXmlDelegationSetNameServers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_restXmlDelegationSets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlDelegationSet(entry, context);
    });
};
const deserializeAws_restXmlDimension = (output, context) => {
    const contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlDimensionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlDimension(entry, context);
    });
};
const deserializeAws_restXmlDNSSECStatus = (output, context) => {
    const contents = {
        ServeSignature: undefined,
        StatusMessage: undefined,
    };
    if (output["ServeSignature"] !== undefined) {
        contents.ServeSignature = (0, smithy_client_1.expectString)(output["ServeSignature"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["StatusMessage"]);
    }
    return contents;
};
const deserializeAws_restXmlErrorMessages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_restXmlGeoLocation = (output, context) => {
    const contents = {
        ContinentCode: undefined,
        CountryCode: undefined,
        SubdivisionCode: undefined,
    };
    if (output["ContinentCode"] !== undefined) {
        contents.ContinentCode = (0, smithy_client_1.expectString)(output["ContinentCode"]);
    }
    if (output["CountryCode"] !== undefined) {
        contents.CountryCode = (0, smithy_client_1.expectString)(output["CountryCode"]);
    }
    if (output["SubdivisionCode"] !== undefined) {
        contents.SubdivisionCode = (0, smithy_client_1.expectString)(output["SubdivisionCode"]);
    }
    return contents;
};
const deserializeAws_restXmlGeoLocationDetails = (output, context) => {
    const contents = {
        ContinentCode: undefined,
        ContinentName: undefined,
        CountryCode: undefined,
        CountryName: undefined,
        SubdivisionCode: undefined,
        SubdivisionName: undefined,
    };
    if (output["ContinentCode"] !== undefined) {
        contents.ContinentCode = (0, smithy_client_1.expectString)(output["ContinentCode"]);
    }
    if (output["ContinentName"] !== undefined) {
        contents.ContinentName = (0, smithy_client_1.expectString)(output["ContinentName"]);
    }
    if (output["CountryCode"] !== undefined) {
        contents.CountryCode = (0, smithy_client_1.expectString)(output["CountryCode"]);
    }
    if (output["CountryName"] !== undefined) {
        contents.CountryName = (0, smithy_client_1.expectString)(output["CountryName"]);
    }
    if (output["SubdivisionCode"] !== undefined) {
        contents.SubdivisionCode = (0, smithy_client_1.expectString)(output["SubdivisionCode"]);
    }
    if (output["SubdivisionName"] !== undefined) {
        contents.SubdivisionName = (0, smithy_client_1.expectString)(output["SubdivisionName"]);
    }
    return contents;
};
const deserializeAws_restXmlGeoLocationDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlGeoLocationDetails(entry, context);
    });
};
const deserializeAws_restXmlHealthCheck = (output, context) => {
    const contents = {
        Id: undefined,
        CallerReference: undefined,
        LinkedService: undefined,
        HealthCheckConfig: undefined,
        HealthCheckVersion: undefined,
        CloudWatchAlarmConfiguration: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = (0, smithy_client_1.expectString)(output["CallerReference"]);
    }
    if (output["LinkedService"] !== undefined) {
        contents.LinkedService = deserializeAws_restXmlLinkedService(output["LinkedService"], context);
    }
    if (output["HealthCheckConfig"] !== undefined) {
        contents.HealthCheckConfig = deserializeAws_restXmlHealthCheckConfig(output["HealthCheckConfig"], context);
    }
    if (output["HealthCheckVersion"] !== undefined) {
        contents.HealthCheckVersion = (0, smithy_client_1.strictParseLong)(output["HealthCheckVersion"]);
    }
    if (output["CloudWatchAlarmConfiguration"] !== undefined) {
        contents.CloudWatchAlarmConfiguration = deserializeAws_restXmlCloudWatchAlarmConfiguration(output["CloudWatchAlarmConfiguration"], context);
    }
    return contents;
};
const deserializeAws_restXmlHealthCheckConfig = (output, context) => {
    const contents = {
        IPAddress: undefined,
        Port: undefined,
        Type: undefined,
        ResourcePath: undefined,
        FullyQualifiedDomainName: undefined,
        SearchString: undefined,
        RequestInterval: undefined,
        FailureThreshold: undefined,
        MeasureLatency: undefined,
        Inverted: undefined,
        Disabled: undefined,
        HealthThreshold: undefined,
        ChildHealthChecks: undefined,
        EnableSNI: undefined,
        Regions: undefined,
        AlarmIdentifier: undefined,
        InsufficientDataHealthStatus: undefined,
        RoutingControlArn: undefined,
    };
    if (output["IPAddress"] !== undefined) {
        contents.IPAddress = (0, smithy_client_1.expectString)(output["IPAddress"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["ResourcePath"] !== undefined) {
        contents.ResourcePath = (0, smithy_client_1.expectString)(output["ResourcePath"]);
    }
    if (output["FullyQualifiedDomainName"] !== undefined) {
        contents.FullyQualifiedDomainName = (0, smithy_client_1.expectString)(output["FullyQualifiedDomainName"]);
    }
    if (output["SearchString"] !== undefined) {
        contents.SearchString = (0, smithy_client_1.expectString)(output["SearchString"]);
    }
    if (output["RequestInterval"] !== undefined) {
        contents.RequestInterval = (0, smithy_client_1.strictParseInt32)(output["RequestInterval"]);
    }
    if (output["FailureThreshold"] !== undefined) {
        contents.FailureThreshold = (0, smithy_client_1.strictParseInt32)(output["FailureThreshold"]);
    }
    if (output["MeasureLatency"] !== undefined) {
        contents.MeasureLatency = (0, smithy_client_1.parseBoolean)(output["MeasureLatency"]);
    }
    if (output["Inverted"] !== undefined) {
        contents.Inverted = (0, smithy_client_1.parseBoolean)(output["Inverted"]);
    }
    if (output["Disabled"] !== undefined) {
        contents.Disabled = (0, smithy_client_1.parseBoolean)(output["Disabled"]);
    }
    if (output["HealthThreshold"] !== undefined) {
        contents.HealthThreshold = (0, smithy_client_1.strictParseInt32)(output["HealthThreshold"]);
    }
    if (output.ChildHealthChecks === "") {
        contents.ChildHealthChecks = [];
    }
    else if (output["ChildHealthChecks"] !== undefined &&
        output["ChildHealthChecks"]["ChildHealthCheck"] !== undefined) {
        contents.ChildHealthChecks = deserializeAws_restXmlChildHealthCheckList((0, smithy_client_1.getArrayIfSingleItem)(output["ChildHealthChecks"]["ChildHealthCheck"]), context);
    }
    if (output["EnableSNI"] !== undefined) {
        contents.EnableSNI = (0, smithy_client_1.parseBoolean)(output["EnableSNI"]);
    }
    if (output.Regions === "") {
        contents.Regions = [];
    }
    else if (output["Regions"] !== undefined && output["Regions"]["Region"] !== undefined) {
        contents.Regions = deserializeAws_restXmlHealthCheckRegionList((0, smithy_client_1.getArrayIfSingleItem)(output["Regions"]["Region"]), context);
    }
    if (output["AlarmIdentifier"] !== undefined) {
        contents.AlarmIdentifier = deserializeAws_restXmlAlarmIdentifier(output["AlarmIdentifier"], context);
    }
    if (output["InsufficientDataHealthStatus"] !== undefined) {
        contents.InsufficientDataHealthStatus = (0, smithy_client_1.expectString)(output["InsufficientDataHealthStatus"]);
    }
    if (output["RoutingControlArn"] !== undefined) {
        contents.RoutingControlArn = (0, smithy_client_1.expectString)(output["RoutingControlArn"]);
    }
    return contents;
};
const deserializeAws_restXmlHealthCheckObservation = (output, context) => {
    const contents = {
        Region: undefined,
        IPAddress: undefined,
        StatusReport: undefined,
    };
    if (output["Region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
    }
    if (output["IPAddress"] !== undefined) {
        contents.IPAddress = (0, smithy_client_1.expectString)(output["IPAddress"]);
    }
    if (output["StatusReport"] !== undefined) {
        contents.StatusReport = deserializeAws_restXmlStatusReport(output["StatusReport"], context);
    }
    return contents;
};
const deserializeAws_restXmlHealthCheckObservations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlHealthCheckObservation(entry, context);
    });
};
const deserializeAws_restXmlHealthCheckRegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_restXmlHealthChecks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlHealthCheck(entry, context);
    });
};
const deserializeAws_restXmlHostedZone = (output, context) => {
    const contents = {
        Id: undefined,
        Name: undefined,
        CallerReference: undefined,
        Config: undefined,
        ResourceRecordSetCount: undefined,
        LinkedService: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["CallerReference"] !== undefined) {
        contents.CallerReference = (0, smithy_client_1.expectString)(output["CallerReference"]);
    }
    if (output["Config"] !== undefined) {
        contents.Config = deserializeAws_restXmlHostedZoneConfig(output["Config"], context);
    }
    if (output["ResourceRecordSetCount"] !== undefined) {
        contents.ResourceRecordSetCount = (0, smithy_client_1.strictParseLong)(output["ResourceRecordSetCount"]);
    }
    if (output["LinkedService"] !== undefined) {
        contents.LinkedService = deserializeAws_restXmlLinkedService(output["LinkedService"], context);
    }
    return contents;
};
const deserializeAws_restXmlHostedZoneConfig = (output, context) => {
    const contents = {
        Comment: undefined,
        PrivateZone: undefined,
    };
    if (output["Comment"] !== undefined) {
        contents.Comment = (0, smithy_client_1.expectString)(output["Comment"]);
    }
    if (output["PrivateZone"] !== undefined) {
        contents.PrivateZone = (0, smithy_client_1.parseBoolean)(output["PrivateZone"]);
    }
    return contents;
};
const deserializeAws_restXmlHostedZoneLimit = (output, context) => {
    const contents = {
        Type: undefined,
        Value: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseLong)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlHostedZoneOwner = (output, context) => {
    const contents = {
        OwningAccount: undefined,
        OwningService: undefined,
    };
    if (output["OwningAccount"] !== undefined) {
        contents.OwningAccount = (0, smithy_client_1.expectString)(output["OwningAccount"]);
    }
    if (output["OwningService"] !== undefined) {
        contents.OwningService = (0, smithy_client_1.expectString)(output["OwningService"]);
    }
    return contents;
};
const deserializeAws_restXmlHostedZones = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlHostedZone(entry, context);
    });
};
const deserializeAws_restXmlHostedZoneSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlHostedZoneSummary(entry, context);
    });
};
const deserializeAws_restXmlHostedZoneSummary = (output, context) => {
    const contents = {
        HostedZoneId: undefined,
        Name: undefined,
        Owner: undefined,
    };
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Owner"] !== undefined) {
        contents.Owner = deserializeAws_restXmlHostedZoneOwner(output["Owner"], context);
    }
    return contents;
};
const deserializeAws_restXmlKeySigningKey = (output, context) => {
    const contents = {
        Name: undefined,
        KmsArn: undefined,
        Flag: undefined,
        SigningAlgorithmMnemonic: undefined,
        SigningAlgorithmType: undefined,
        DigestAlgorithmMnemonic: undefined,
        DigestAlgorithmType: undefined,
        KeyTag: undefined,
        DigestValue: undefined,
        PublicKey: undefined,
        DSRecord: undefined,
        DNSKEYRecord: undefined,
        Status: undefined,
        StatusMessage: undefined,
        CreatedDate: undefined,
        LastModifiedDate: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["KmsArn"] !== undefined) {
        contents.KmsArn = (0, smithy_client_1.expectString)(output["KmsArn"]);
    }
    if (output["Flag"] !== undefined) {
        contents.Flag = (0, smithy_client_1.strictParseInt32)(output["Flag"]);
    }
    if (output["SigningAlgorithmMnemonic"] !== undefined) {
        contents.SigningAlgorithmMnemonic = (0, smithy_client_1.expectString)(output["SigningAlgorithmMnemonic"]);
    }
    if (output["SigningAlgorithmType"] !== undefined) {
        contents.SigningAlgorithmType = (0, smithy_client_1.strictParseInt32)(output["SigningAlgorithmType"]);
    }
    if (output["DigestAlgorithmMnemonic"] !== undefined) {
        contents.DigestAlgorithmMnemonic = (0, smithy_client_1.expectString)(output["DigestAlgorithmMnemonic"]);
    }
    if (output["DigestAlgorithmType"] !== undefined) {
        contents.DigestAlgorithmType = (0, smithy_client_1.strictParseInt32)(output["DigestAlgorithmType"]);
    }
    if (output["KeyTag"] !== undefined) {
        contents.KeyTag = (0, smithy_client_1.strictParseInt32)(output["KeyTag"]);
    }
    if (output["DigestValue"] !== undefined) {
        contents.DigestValue = (0, smithy_client_1.expectString)(output["DigestValue"]);
    }
    if (output["PublicKey"] !== undefined) {
        contents.PublicKey = (0, smithy_client_1.expectString)(output["PublicKey"]);
    }
    if (output["DSRecord"] !== undefined) {
        contents.DSRecord = (0, smithy_client_1.expectString)(output["DSRecord"]);
    }
    if (output["DNSKEYRecord"] !== undefined) {
        contents.DNSKEYRecord = (0, smithy_client_1.expectString)(output["DNSKEYRecord"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["StatusMessage"] !== undefined) {
        contents.StatusMessage = (0, smithy_client_1.expectString)(output["StatusMessage"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreatedDate"]));
    }
    if (output["LastModifiedDate"] !== undefined) {
        contents.LastModifiedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastModifiedDate"]));
    }
    return contents;
};
const deserializeAws_restXmlKeySigningKeys = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlKeySigningKey(entry, context);
    });
};
const deserializeAws_restXmlLinkedService = (output, context) => {
    const contents = {
        ServicePrincipal: undefined,
        Description: undefined,
    };
    if (output["ServicePrincipal"] !== undefined) {
        contents.ServicePrincipal = (0, smithy_client_1.expectString)(output["ServicePrincipal"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    return contents;
};
const deserializeAws_restXmlLocationSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlLocationSummary(entry, context);
    });
};
const deserializeAws_restXmlLocationSummary = (output, context) => {
    const contents = {
        LocationName: undefined,
    };
    if (output["LocationName"] !== undefined) {
        contents.LocationName = (0, smithy_client_1.expectString)(output["LocationName"]);
    }
    return contents;
};
const deserializeAws_restXmlQueryLoggingConfig = (output, context) => {
    const contents = {
        Id: undefined,
        HostedZoneId: undefined,
        CloudWatchLogsLogGroupArn: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["CloudWatchLogsLogGroupArn"] !== undefined) {
        contents.CloudWatchLogsLogGroupArn = (0, smithy_client_1.expectString)(output["CloudWatchLogsLogGroupArn"]);
    }
    return contents;
};
const deserializeAws_restXmlQueryLoggingConfigs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlQueryLoggingConfig(entry, context);
    });
};
const deserializeAws_restXmlRecordData = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_restXmlResourceRecord = (output, context) => {
    const contents = {
        Value: undefined,
    };
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlResourceRecords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlResourceRecord(entry, context);
    });
};
const deserializeAws_restXmlResourceRecordSet = (output, context) => {
    const contents = {
        Name: undefined,
        Type: undefined,
        SetIdentifier: undefined,
        Weight: undefined,
        Region: undefined,
        GeoLocation: undefined,
        Failover: undefined,
        MultiValueAnswer: undefined,
        TTL: undefined,
        ResourceRecords: undefined,
        AliasTarget: undefined,
        HealthCheckId: undefined,
        TrafficPolicyInstanceId: undefined,
        CidrRoutingConfig: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["SetIdentifier"] !== undefined) {
        contents.SetIdentifier = (0, smithy_client_1.expectString)(output["SetIdentifier"]);
    }
    if (output["Weight"] !== undefined) {
        contents.Weight = (0, smithy_client_1.strictParseLong)(output["Weight"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = (0, smithy_client_1.expectString)(output["Region"]);
    }
    if (output["GeoLocation"] !== undefined) {
        contents.GeoLocation = deserializeAws_restXmlGeoLocation(output["GeoLocation"], context);
    }
    if (output["Failover"] !== undefined) {
        contents.Failover = (0, smithy_client_1.expectString)(output["Failover"]);
    }
    if (output["MultiValueAnswer"] !== undefined) {
        contents.MultiValueAnswer = (0, smithy_client_1.parseBoolean)(output["MultiValueAnswer"]);
    }
    if (output["TTL"] !== undefined) {
        contents.TTL = (0, smithy_client_1.strictParseLong)(output["TTL"]);
    }
    if (output.ResourceRecords === "") {
        contents.ResourceRecords = [];
    }
    else if (output["ResourceRecords"] !== undefined && output["ResourceRecords"]["ResourceRecord"] !== undefined) {
        contents.ResourceRecords = deserializeAws_restXmlResourceRecords((0, smithy_client_1.getArrayIfSingleItem)(output["ResourceRecords"]["ResourceRecord"]), context);
    }
    if (output["AliasTarget"] !== undefined) {
        contents.AliasTarget = deserializeAws_restXmlAliasTarget(output["AliasTarget"], context);
    }
    if (output["HealthCheckId"] !== undefined) {
        contents.HealthCheckId = (0, smithy_client_1.expectString)(output["HealthCheckId"]);
    }
    if (output["TrafficPolicyInstanceId"] !== undefined) {
        contents.TrafficPolicyInstanceId = (0, smithy_client_1.expectString)(output["TrafficPolicyInstanceId"]);
    }
    if (output["CidrRoutingConfig"] !== undefined) {
        contents.CidrRoutingConfig = deserializeAws_restXmlCidrRoutingConfig(output["CidrRoutingConfig"], context);
    }
    return contents;
};
const deserializeAws_restXmlResourceRecordSets = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlResourceRecordSet(entry, context);
    });
};
const deserializeAws_restXmlResourceTagSet = (output, context) => {
    const contents = {
        ResourceType: undefined,
        ResourceId: undefined,
        Tags: undefined,
    };
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = (0, smithy_client_1.expectString)(output["ResourceType"]);
    }
    if (output["ResourceId"] !== undefined) {
        contents.ResourceId = (0, smithy_client_1.expectString)(output["ResourceId"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["Tag"] !== undefined) {
        contents.Tags = deserializeAws_restXmlTagList((0, smithy_client_1.getArrayIfSingleItem)(output["Tags"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_restXmlResourceTagSetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlResourceTagSet(entry, context);
    });
};
const deserializeAws_restXmlReusableDelegationSetLimit = (output, context) => {
    const contents = {
        Type: undefined,
        Value: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.strictParseLong)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlStatusReport = (output, context) => {
    const contents = {
        Status: undefined,
        CheckedTime: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["CheckedTime"] !== undefined) {
        contents.CheckedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CheckedTime"]));
    }
    return contents;
};
const deserializeAws_restXmlTag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_restXmlTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTag(entry, context);
    });
};
const deserializeAws_restXmlTrafficPolicies = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTrafficPolicy(entry, context);
    });
};
const deserializeAws_restXmlTrafficPolicy = (output, context) => {
    const contents = {
        Id: undefined,
        Version: undefined,
        Name: undefined,
        Type: undefined,
        Document: undefined,
        Comment: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.strictParseInt32)(output["Version"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Document"] !== undefined) {
        contents.Document = (0, smithy_client_1.expectString)(output["Document"]);
    }
    if (output["Comment"] !== undefined) {
        contents.Comment = (0, smithy_client_1.expectString)(output["Comment"]);
    }
    return contents;
};
const deserializeAws_restXmlTrafficPolicyInstance = (output, context) => {
    const contents = {
        Id: undefined,
        HostedZoneId: undefined,
        Name: undefined,
        TTL: undefined,
        State: undefined,
        Message: undefined,
        TrafficPolicyId: undefined,
        TrafficPolicyVersion: undefined,
        TrafficPolicyType: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = (0, smithy_client_1.expectString)(output["HostedZoneId"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["TTL"] !== undefined) {
        contents.TTL = (0, smithy_client_1.strictParseLong)(output["TTL"]);
    }
    if (output["State"] !== undefined) {
        contents.State = (0, smithy_client_1.expectString)(output["State"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output["TrafficPolicyId"] !== undefined) {
        contents.TrafficPolicyId = (0, smithy_client_1.expectString)(output["TrafficPolicyId"]);
    }
    if (output["TrafficPolicyVersion"] !== undefined) {
        contents.TrafficPolicyVersion = (0, smithy_client_1.strictParseInt32)(output["TrafficPolicyVersion"]);
    }
    if (output["TrafficPolicyType"] !== undefined) {
        contents.TrafficPolicyType = (0, smithy_client_1.expectString)(output["TrafficPolicyType"]);
    }
    return contents;
};
const deserializeAws_restXmlTrafficPolicyInstances = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTrafficPolicyInstance(entry, context);
    });
};
const deserializeAws_restXmlTrafficPolicySummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlTrafficPolicySummary(entry, context);
    });
};
const deserializeAws_restXmlTrafficPolicySummary = (output, context) => {
    const contents = {
        Id: undefined,
        Name: undefined,
        Type: undefined,
        LatestVersion: undefined,
        TrafficPolicyCount: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["LatestVersion"] !== undefined) {
        contents.LatestVersion = (0, smithy_client_1.strictParseInt32)(output["LatestVersion"]);
    }
    if (output["TrafficPolicyCount"] !== undefined) {
        contents.TrafficPolicyCount = (0, smithy_client_1.strictParseInt32)(output["TrafficPolicyCount"]);
    }
    return contents;
};
const deserializeAws_restXmlVPC = (output, context) => {
    const contents = {
        VPCRegion: undefined,
        VPCId: undefined,
    };
    if (output["VPCRegion"] !== undefined) {
        contents.VPCRegion = (0, smithy_client_1.expectString)(output["VPCRegion"]);
    }
    if (output["VPCId"] !== undefined) {
        contents.VPCId = (0, smithy_client_1.expectString)(output["VPCId"]);
    }
    return contents;
};
const deserializeAws_restXmlVPCs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_restXmlVPC(entry, context);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const loadRestXmlErrorCode = (output, data) => {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
