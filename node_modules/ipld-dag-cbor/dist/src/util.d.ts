export type CIDVersion = import('cids').CIDVersion;
export type HashCode = import('multihashing-async').multihash.HashCode;
export const codec: import("multicodec/src/generated-types").CodecCode;
export const defaultHashAlg: import("multihashes/dist/src/constants").HashCode;
/**
 * Configure the underlying CBOR decoder.
 *
 * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.
 * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`
 * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error
 * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`
 */
export function configureDecoder(options?: {
    size?: number | undefined;
    maxSize?: number | undefined;
    tags?: Object | undefined;
} | undefined): void;
/**
 * Serialize internal representation into a binary CBOR block.
 *
 * @param {Object} node - Internal representation of a CBOR block
 * @returns {Uint8Array} - The encoded binary representation
 */
export function serialize(node: Object): Uint8Array;
/**
 * Deserialize CBOR block into the internal representation.
 *
 * @param {Uint8Array} data - Binary representation of a CBOR block
 * @returns {any} - An object that conforms to the IPLD Data Model
 */
export function deserialize(data: Uint8Array): any;
/**
 * Calculate the CID of the binary blob.
 *
 * @param {Uint8Array} binaryBlob - Encoded IPLD Node
 * @param {Object} [userOptions] - Options to create the CID
 * @param {CIDVersion} [userOptions.cidVersion=1] - CID version number
 * @param {HashCode} [userOptions.hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format
 */
export function cid(binaryBlob: Uint8Array, userOptions?: {
    cidVersion?: CID.CIDVersion | undefined;
    hashAlg?: multihashing.multihash.HashCode | undefined;
} | undefined): Promise<CID>;
import CID = require("cids");
import multihashing = require("multihashing-async");
//# sourceMappingURL=util.d.ts.map