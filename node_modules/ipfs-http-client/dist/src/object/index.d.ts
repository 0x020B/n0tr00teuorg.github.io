declare function _exports(config: import('../types').Options): {
    data: (cid: import("cids"), options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<Uint8Array>;
    get: (cid: import("cids"), options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipld-dag-pb/src/dag-node/dagNode")>;
    links: (cid: import("cids"), options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipld-dag-pb/src/dag-link/dagLink")[]>;
    new: (options?: (import("ipfs-core-types/src/object").NewObjectOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("cids")>;
    patch: {
        addLink: (cid: import("cids"), dLink: import("ipld-dag-pb/src/dag-link/dagLink"), options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("cids")>;
        appendData: (cid: import("cids"), data: Uint8Array, options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("cids")>;
        rmLink: (cid: import("cids"), dLink: string | import("ipld-dag-pb/src/dag-link/dagLink"), options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("cids")>;
        setData: (cid: import("cids"), data: Uint8Array, options?: (import("ipfs-core-types").AbortOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("cids")>;
    };
    put: (obj: Uint8Array | import("ipld-dag-pb/src/dag-node/dagNode") | import("ipld-dag-pb/src/types").DAGNodeLike, options?: (import("ipfs-core-types/src/object").PutOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("cids")>;
    stat: (cid: import("cids"), options?: (import("ipfs-core-types").AbortOptions & import("ipfs-core-types/src/utils").PreloadOptions & import("../types").HTTPClientExtraOptions) | undefined) => Promise<import("ipfs-core-types/src/object").StatResult>;
};
export = _exports;
//# sourceMappingURL=index.d.ts.map